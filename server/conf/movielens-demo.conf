samantha.movielens-demo {
  engineType = "RECOMMENDER"
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "movieData"
      indexPrefix = "ml-demo-movieData"
      configClass = "org.grouplens.samantha.server.indexer.RedisBasedIndexerConfig"
      dataFields = ["movieId", "releaseYear", "popularity", "avgRating", "releaseYear",
        "genres", "runtime", "mpaa", "tstamp"]
      indexStructure = "HASH_SET"
      hashFields = ["movieId"]
      keyFields = ["movieId"]
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userMovieRating"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "ml-demo-userMovieRating"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "rating", "popularity", "avgRating", "releaseYear",
        "genres", "runtime", "mpaa", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "groupedUserMovieRating"
      configClass = "org.grouplens.samantha.server.indexer.GroupedIndexerConfig"
      dependedIndexer = "userMovieRating"
      dataFields = ["userId", "movieId", "rating", "popularity", "avgRating", "releaseYear",
        "genres", "runtime", "mpaa", "tstamp"]
      filesKey = "files"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      groupKeys = ["userId"]
      numBuckets = 10
      separator = "\t"
      dataDir = ${samantha.dataDir}"/ml-demo-groupedUserMovieRating"
      dataDirKey = "dataDir"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userMovieAction"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "ml-demo-userMovieAction"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "action", "popularity", "avgRating", "releaseYear",
        "genres", "runtime", "mpaa", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.RedisBasedJoinExpander"
          expandFields = [
            {
              prefix = "movieData"
              keys = ["movieId"]
              fields = ["movieId", "releaseYear", "popularity", "avgRating", "genres",
                "runtime", "mpaa"]
            }
          ]
        }
      ]
      dataSubscribers = [
        {
          name = "ml-demo-linearucb-predictor"
          componentType = "PREDICTOR"
          requestContext {
            modelOperation: "UPDATE",
            modelName: "ml-demo-linearucb-predictor-model",
            predictor: "ml-demo-linearucb-predictor"
          }
        }
      ]
    }
  ]
  retrievers = [
    {
      name = "FeatureSupportMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.FeatureSupportRetrieverConfig"
      maxHits = 5000
      itemAttrs = ["movieId"]
      supportAttr = "support"
      predictorName = "ml-demo-svdfea-predictor"
      modelName = "ml-demo-svdfea-predictor-model"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.RequestBasedExpander"
          requestFields = ["userId"]
        }
      ]
    }, {
      name = "RedisMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.ItemKnnRetrieverConfig"
      userInterRetrieverName = "RedisUserMovieInteractionRetriever"
      knnModelName = "ml-demo-item-knn-model"
      kdnModelName = "ml-demo-item-kdn-model"
      knnModelFile = ${samantha.modelDir}"/ml-demo-itemKnnModel.bin"
      svdfeaPredictorName = "ml-demo-svdfea-predictor"
      svdfeaModelName = "ml-demo-svdfea-predictor-model"
      numNeighbors = 30
      minSupport = 10
      itemAttrs = ["movieId"]
      scoreAttr = "redisMovieRetrieverScore"
    }, {
      name = "RedisUserMovieInteractionRetriever"
      configClass = "org.grouplens.samantha.server.retriever.RedisKeyBasedRetrieverConfig"
      retrieveFields = ["userId", "movieId"]
      keyFields = ["userId"]
      indexPrefix = "userMovieInteraction"
    }
  ]
  predictors = [
    {
      name = "ml-demo-funksvd-predictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "ml-demo-funksvd-predictor-model"
      modelFile = ${samantha.modelDir}"/ml-demo-funksvd-predictor-model.bin"
      labelName = "rating"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["RealPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieFactor"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.L2NormLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.01
        l2coef = 0.001
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 50
        learningRate = 0.01
        l2coef = 0.001
        cachePath = ${samantha.dataDir}
      }
      factDim = 20
      biasFeas = ["globalBias", "userBias", "movieBias"]
      ufactFeas = ["userFactor"]
      ifactFeas = ["movieFactor"]
    }, {
      name = "ml-demo-biglr-predictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "ml-demo-biglr-predictor-model"
      modelFile = ${samantha.modelDir}"/ml-demo-biglr-predictor-model.bin"
      labelName = "highRated"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["BinaryClassificationEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userIdBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieIdBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "releaseYear"
            indexName = "BIASES"
            feaName = "releaseYearBias"
            multiplier = 0.1
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            attrName = "genres"
            indexName = "BIASES"
            feaName = "genresBias"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "runtime"
            indexName = "BIASES"
            feaName = "runtimeBias"
            multiplier = 0.016
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "mpaa"
            indexName = "BIASES"
            feaName = "mpaaBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConcatenateStringExtractorConfig"
            attrNames = ["userId", "mpaa"]
            indexName = "BIASES"
            feaName = "userIdMpaaBias"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.LogisticLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.01
        l2coef = 0.0
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 50
        learningRate = 0.01
        l2coef = 0.0
        cachePath = ${samantha.dataDir}
      }
      factDim = 20
      biasFeas = ["globalBias", "userIdBias", "movieIdBias", "releaseYearBias", "genresBias",
        "runtimeBias", "mpaaBias", "userIdMpaaBias"]
      ufactFeas = []
      ifactFeas = []
    }, {
      name = "ml-demo-svdfea-predictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "ml-demo-svdfea-predictor-model"
      modelFile = ${samantha.modelDir}"/ml-demo-svdfea-predictor-model.bin"
      labelName = "rating"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["RealPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userIdBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieIdBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "releaseYear"
            indexName = "BIASES"
            feaName = "releaseYearBias"
            multiplier = 0.1
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            attrName = "genres"
            indexName = "BIASES"
            feaName = "genresBias"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "runtime"
            indexName = "BIASES"
            feaName = "runtimeBias"
            multiplier = 0.016
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "mpaa"
            indexName = "BIASES"
            feaName = "mpaaBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userIdFact"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieIdFact"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "releaseYear"
            indexName = "FACTORS"
            feaName = "releaseYearFact"
            multiplier = 0.1
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            attrName = "genres"
            indexName = "FACTORS"
            feaName = "genresFact"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "runtime"
            indexName = "FACTORS"
            feaName = "runtimeFact"
            multiplier = 0.016
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "mpaa"
            indexName = "FACTORS"
            feaName = "mpaaFact"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.L2NormLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.001
        l2coef = 0.0
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 50
        learningRate = 0.001
        l2coef = 0.0
        cachePath = ${samantha.dataDir}
      }
      factDim = 20
      biasFeas = ["globalBias", "userIdBias", "movieIdBias", "releaseYearBias", "genresBias",
        "runtimeBias", "mpaaBias"]
      ufactFeas = ["userIdFact"]
      ifactFeas = ["movieIdFact", "releaseYearFact", "genresFact", "runtimeFact",
        "mpaaFact"]
    }, {
      name = "ml-demo-svdfea-wishlist-predictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "ml-demo-svdfea-wishlist-predictor-model"
      modelFile = ${samantha.modelDir}"/ml-demo-svdfea-wishlist-predictor-model.bin"
      labelName = "rating"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["RealPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userIdBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            attrName = "wishlist"
            indexName = "BIASES"
            feaName = "wishlistBias"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieIdBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "releaseYear"
            indexName = "BIASES"
            feaName = "releaseYearBias"
            multiplier = 0.1
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            attrName = "genres"
            indexName = "BIASES"
            feaName = "genresBias"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "runtime"
            indexName = "BIASES"
            feaName = "runtimeBias"
            multiplier = 0.016
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "mpaa"
            indexName = "BIASES"
            feaName = "mpaaBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userIdFact"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            attrName = "wishlist"
            indexName = "FACTORS"
            feaName = "wishlistFact"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieIdFact"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "releaseYear"
            indexName = "FACTORS"
            feaName = "releaseYearFact"
            multiplier = 0.1
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            attrName = "genres"
            indexName = "FACTORS"
            feaName = "genresFact"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "runtime"
            indexName = "FACTORS"
            feaName = "runtimeFact"
            multiplier = 0.016
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "mpaa"
            indexName = "FACTORS"
            feaName = "mpaaFact"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.L2NormLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.01
        l2coef = 0.0
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 50
        learningRate = 0.01
        l2coef = 0.0
        cachePath = ${samantha.dataDir}
      }
      factDim = 20
      biasFeas = ["globalBias", "userIdBias", "movieIdBias", "releaseYearBias", "genresBias",
        "runtimeBias", "mpaaBias", "wishlistBias"]
      ufactFeas = ["userIdFact"]
      ifactFeas = ["movieIdFact", "releaseYearFact", "genresFact", "runtimeFact",
        "mpaaFact", "wishlistFact"]
    }, {
      name = "ml-demo-svdfea-map-predictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "ml-demo-svdfea-map-predictor-model"
      modelFile = ${samantha.modelDir}"/ml-demo-svdfea-map-predictor-model.bin"
      labelName = "rating"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["RecommendationEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userIdBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieIdBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "releaseYear"
            indexName = "BIASES"
            feaName = "releaseYearBias"
            multiplier = 0.1
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            attrName = "genres"
            indexName = "BIASES"
            feaName = "genresBias"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "runtime"
            indexName = "BIASES"
            feaName = "runtimeBias"
            multiplier = 0.016
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "mpaa"
            indexName = "BIASES"
            feaName = "mpaaBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userIdFact"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieIdFact"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "releaseYear"
            indexName = "FACTORS"
            feaName = "releaseYearFact"
            multiplier = 0.1
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            attrName = "genres"
            indexName = "FACTORS"
            feaName = "genresFact"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.NumericalToIntegerExtractorConfig"
            attrName = "runtime"
            indexName = "FACTORS"
            feaName = "runtimeFact"
            multiplier = 0.016
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "mpaa"
            indexName = "FACTORS"
            feaName = "mpaaFact"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.MAPLossConfig"
        N = 24
        sigma = 1.0
        threshold = 4.0
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.01
        l2coef = 0.0
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 50
        learningRate = 0.01
        l2coef = 0.0
        cachePath = ${samantha.dataDir}
      }
      factDim = 20
      biasFeas = ["globalBias", "userIdBias", "movieIdBias", "releaseYearBias", "genresBias",
        "runtimeBias", "mpaaBias"]
      ufactFeas = ["userIdFact"]
      ifactFeas = ["movieIdFact", "releaseYearFact", "genresFact", "runtimeFact",
        "mpaaFact"]
    }, {
      name = "ml-demo-xgboost-predictor"
      configClass = "org.grouplens.samantha.xgboost.XGBoostPredictorConfig"
      modelName = "ml-demo-xgboost-predictor-model"
      modelFile = ${samantha.modelDir}"/ml-demo-xgboost-predictor-model.bin"
      labelName = "rating"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["RealPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "TREE"
            attrName = "userId"
            feaName = "userId"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "TREE"
            feaName = "movieId"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            attrName = "releaseYear"
            indexName = "TREE"
            feaName = "releaseYear"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            attrName = "genres"
            indexName = "TREE"
            feaName = "genres"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            attrName = "runtime"
            indexName = "TREE"
            feaName = "runtime"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "mpaa"
            indexName = "TREE"
            feaName = "mpaa"
          }
        ]
      }
      features = ["userId", "movieId", "releaseYear", "genres", "runtime", "mpaa"]
      numTrees = 50
      methodConfig {
        objective = "reg:linear"
        eval_metric = "rmse"
        verbose = false
        silent = 1
        tree_method = "exact"
      }
    }, {
      name = "ml-demo-xgboost-ensemble-predictor"
      configClass = "org.grouplens.samantha.xgboost.XGBoostPredictorConfig"
      modelName = "ml-demo-xgboost-ensemble-predictor-model"
      modelFile = ${samantha.modelDir}"/ml-demo-xgboost-ensemble-predictor-model.bin"
      labelName = "rating"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["RealPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SVDFeatureFactorExtractorConfig"
            indexName = "TREE"
            predictorName = "ml-demo-svdfea-predictor"
            modelName = "ml-demo-svdfea-predictor-model"
            feature2dependents {
              "userId" = ["userIdFact"]
              "movieId" = ["movieIdFact"]
            }
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            attrName = "releaseYear"
            indexName = "TREE"
            feaName = "releaseYear"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            attrName = "genres"
            indexName = "TREE"
            feaName = "genres"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            attrName = "runtime"
            indexName = "TREE"
            feaName = "runtime"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "mpaa"
            indexName = "TREE"
            feaName = "mpaa"
          }
        ]
      }
      features = ["userId", "movieId", "releaseYear", "genres", "runtime", "mpaa"]
      numTrees = 50
      methodConfig {
        objective = "reg:linear"
        eval_metric = "rmse"
        verbose = false
        silent = 1
        tree_method = "exact"
      }
    }, {
      name = "ml-demo-linearucb-predictor"
      configClass = "org.grouplens.samantha.server.predictor.LinearUCBPredictorConfig"
      modelName = "ml-demo-linearucb-predictor-model"
      modelFile = ${samantha.modelDir}"/ml-demo-linearucb-predictor-model.bin"
      labelName = "action"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.RedisBasedJoinExpander"
          expandFields = [
            {
              prefix = "movieData"
              keys = ["movieId"]
              fields = ["movieId", "releaseYear", "popularity", "avgRating", "genres",
                "runtime", "mpaa"]
            }
          ]
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "ml-demo-svdfea-predictor"
          scoreAttr = "svdfeaPred"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "ml-demo-xgboost-predictor"
          scoreAttr = "xgboostPred"
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "svdfeaPred"
            feaName = "svdfeaPred"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "xgboostPred"
            feaName = "xgboostPred"
          }
        ]
      }
      lambda = 10
      alpha = 0.0
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 1.0
        l2coef = 0.0
        tol = 0.0
      }
      features = ["globalBias", "svdfeaPred", "xgboostPred"]
      numMainFeatures = 3
    }
  ]
  rankers = [
    {
      name = "ml-demo-svdfea-ranker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "ml-demo-svdfea-predictor"
      pageSize = 24
    }, {
      name = "ml-demo-svdfea-map-ranker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "ml-demo-svdfea-map-predictor"
      pageSize = 24
    }, {
      name = "ml-demo-xgboost-ranker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "ml-demo-xgboost-predictor"
      pageSize = 24
    }, {
      name = "ml-demo-linearucb-ranker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "ml-demo-linearucb-predictor"
      pageSize = 24
    }
  ]
  recommenders = [
    {
      name = "ml-demo-svdfea-recommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "FeatureSupportMovieRetriever"
      ranker = "ml-demo-svdfea-ranker"
    }, {
      name = "ml-demo-svdfea-map-recommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "FeatureSupportMovieRetriever"
      ranker = "ml-demo-svdfea-map-ranker"
    }, {
      name = "ml-demo-xgboost-recommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "FeatureSupportMovieRetriever"
      ranker = "ml-demo-xgboost-ranker"
    }, {
      name = "ml-demo-linearucb-recommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "FeatureSupportMovieRetriever"
      ranker = "ml-demo-linearucb-ranker"
    }
  ]
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
//  router {
//    configClass = "org.grouplens.samantha.server.router.HashBucketRouterConfig"
//    predictorConfig {
//      hashAttrs = ["userId"]
//      numBuckets = 100
//      name2range {
//        "ml-demo-svdfea-predictor": [10, 99]
//        "ml-demo-xgboost-predictor": [0, 9]
//      }
//    }
//    recommenderConfig {
//      hashAttrs = ["userId"]
//      numBuckets = 100
//      name2range {
//        "ml-demo-svdfea-recommender": [10, 99]
//        "ml-demo-xgboost-recommender": [0, 9]
//      }
//    }
//  }
  evaluators = [
    {
      name = "RealPredictionEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAEConfig"
          labelName = "rating"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.RMSEConfig"
          labelName = "rating"
        }
      ]
    }, {
      name = "BinaryClassificationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "highRated"
          aucType = "GLOBAL"
        }
      ]
    }, {
      name = "RecommendationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId"]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["movieId"]
          relevanceKey = "rating"
          threshold = 4.0
          N = [8, 24]
        }
      ]
    }
  ]
  schedulers = [
    {
      name = "movielens-daily-scheduler"
      configClass = "org.grouplens.samantha.server.scheduler.QuartzSchedulerConfig"
      cronExpression = "0 0 0 * * ? *"
      jobClass = "org.grouplens.samantha.server.scheduler.ComponentGetterQuartzJob"
      jobConfig {
        tasks = [
          {
            indexerData = [{
              indexerName = "userMovieRating"
              daoConfigKey = "learningDaoConfig"
              requestContext {
                beginTime = "now - 365 DAYS"
                endTime = "now - 1 DAYS"
              }
            }, {
              indexerName = "userMovieRating"
              daoConfigKey = "validationDaoConfig"
              requestContext {
                beginTime = "now - 1 DAYS"
                endTime = "now - 0 HOURS"
              }
            }, {
              indexerName = "userMovieRating"
              daoConfigKey = "evaluatorDaoConfig"
              requestContext {
                beginTime = "now - 1 DAYS"
                endTime = "now - 0 HOURS"
              }
            }]
            otherData = []
            runner {
              name = "ml-demo-svdfea-predictor"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "ml-demo-svdfea-predictor-model"
                modelOperation = "BUILD"
              }
            }
          }, {
            indexerData = [{
              indexerName = "userMovieRating"
              daoConfigKey = "learningDaoConfig"
              requestContext {
                beginTime = "now - 365 DAYS"
                endTime = "now - 1 DAYS"
              }
            }, {
              indexerName = "userMovieRating"
              daoConfigKey = "validationDaoConfig"
              requestContext {
                beginTime = "now - 1 DAYS"
                endTime = "now - 0 HOURS"
              }
            }, {
              indexerName = "userMovieRating"
              daoConfigKey = "evaluatorDaoConfig"
              requestContext {
                beginTime = "now - 1 DAYS"
                endTime = "now - 0 HOURS"
              }
            }]
            otherData = []
            runner {
              name = "ml-demo-xgboost-predictor"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "ml-demo-xgboost-predictor-model"
                modelOperation = "BUILD"
              }
            }
          }
        ]
      }
    }
  ]
}
