samantha.movielens {
  engineType = "RECOMMENDER"
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "userMovieRating"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "ml-userMovieRating"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "rating", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = [
        {
          name = "ml-rating-predictor"
          componentType = "PREDICTOR"
          requestContext {
            modelOperation: "UPDATE",
            modelName: "ml-rating-predictor-model",
            predictor: "ml-rating-predictor"
          }
        }
      ]
    }, {
      name = "groupedUserMovieRating"
      configClass = "org.grouplens.samantha.server.indexer.GroupedIndexerConfig"
      dependedIndexer = "userMovieRating"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "rating", "tstamp"]
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      groupKeys = ["userId"]
      numBuckets = 10
      separator = "\t"
      dataDir = ${samantha.dataDir}"/groupedUserMovieRating"
      dataDirKey = "dataDir"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }
  ]
  retrievers = [
    {
      name = "FeatureSupportMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.FeatureSupportRetrieverConfig"
      maxHits = 5000
      itemAttrs = ["movieId"]
      supportAttr = "support"
      predictorName = "ml-rating-predictor"
      modelName = "ml-rating-predictor-model"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.RetrieverBasedItemFilterExpander"
          retrieverName = "RequestBasedMovieRetriever"
          itemAttrs = ["movieId"]
          exclude = false
        }
      ]
    }, {
      name = "RequestBasedMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.RequestBasedRetrieverConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
    }
  ]
  predictors = [
    {
      name = "ml-rating-predictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "ml-rating-predictor-model"
      modelFile = ${samantha.modelDir}"/ml-rating-predictor-model.bin"
      labelName = "rating"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["RealPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieFactor"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.L2NormLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.01
        l2coef = 0.001
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 50
        learningRate = 0.01
        l2coef = 0.001
        cachePath = ${samantha.dataDir}
      }
      factDim = 30
      biasFeas = ["globalBias", "userBias", "movieBias"]
      ufactFeas = ["userFactor"]
      ifactFeas = ["movieFactor"]
    }
  ]
  rankers = [
    {
      name = "RatingPredictorBasedRanker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "ml-rating-predictor"
      pageSize = 24
    }
  ]
  recommenders = [
    {
      name = "ml-rating-recommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "FeatureSupportMovieRetriever"
      ranker = "RatingPredictorBasedRanker"
    }
  ]
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
  evaluators = [
    {
      name = "RealPredictionEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAEConfig"
          labelName = "rating"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.RMSEConfig"
          labelName = "rating"
        }
      ]
    }, {
      name = "RecommendationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId"]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["movieId"]
          relevanceKey = "rating"
          threshold = 4.0
          N = [8, 24]
        }
      ]
    }
  ]
  schedulers = [
    {
      name = "movielens-daily-scheduler"
      configClass = "org.grouplens.samantha.server.scheduler.QuartzSchedulerConfig"
      cronExpression = "0 0 0 * * ? *"
      jobClass = "org.grouplens.samantha.server.scheduler.ComponentGetterQuartzJob"
      jobConfig {
        tasks = [
          { # train a rating predictor model
            indexerData = [{
              indexerName = "userMovieRating"
              daoConfigKey = "learningDaoConfig"
              requestContext {
                beginTime = "now - 365 DAYS"
                endTime = "now - 1 DAYS"
              }
            }, {
              indexerName = "userMovieRating"
              daoConfigKey = "validationDaoConfig"
              requestContext {
                beginTime = "now - 1 DAYS"
                endTime = "now - 0 HOURS"
              }
            }, {
              indexerName = "userMovieRating"
              daoConfigKey = "evaluatorDaoConfig"
              requestContext {
                beginTime = "now - 1 DAYS"
                endTime = "now - 0 HOURS"
              }
            }]
            otherData = []
            runner {
              name = "ml-rating-predictor"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "ml-rating-predictor-model"
                modelOperation = "BUILD"
              }
            }
          }, { #recommendation evaluation of ml-rating-recommender
            indexerData = [{
              indexerName = "groupedUserMovieRating"
              daoConfigKey = "evaluatorDaoConfig"
              requestContext {
                beginTime = "now - 1 DAYS"
                endTime = "now - 0 HOURS"
              }
            }]
            otherData = []
            runner = {
              name = "RecommendationEvaluator"
              componentType = "EVALUATOR"
              requestContext = {
                recommender = "ml-rating-recommender"
              }
            }
          }
        ]
      }
    }
  ]
}
