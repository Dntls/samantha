samantha.inaction {
  engineType = "RECOMMENDER"
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "userMovieDisplay"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "inactionUserMovieDisplay"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = [
        "tstamp", "userId", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
        "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
        "reason", "notice", "familiar", "when", "rate", "future", "skip",
      ]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "groupedUserMovieDisplay"
      configClass = "org.grouplens.samantha.server.indexer.GroupedIndexerConfig"
      dependedIndexer = "userMovieDisplay"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = [
        "tstamp", "userId", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
        "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
        "reason", "notice", "familiar", "when", "rate", "future", "skip",
      ]
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      groupKeys = ["userId"]
      orderFields = ["tstamp", "rank"]
      orderFieldsTypes = ["INT", "INT"]
      numBuckets = 500
      skip = true
      separator = "\t"
      dataDir = ${samantha.dataDir}"/inactionGroupedUserMovieDisplay"
      dataDirKey = "dataDir"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userMovieDisplaySequence"
      configClass = "org.grouplens.samantha.server.tensorflow.UserSequenceIndexerConfig"
      dependedIndexer = "groupedUserMovieDisplay"
      groupKeys = ["userId"]
      otherDataFields = [
        "tstamp", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
        "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
        "reason", "notice", "familiar", "when", "rate", "future", "skip",
      ]
      filesKey = "files"
      filePath = ${samantha.dataDir}"/inactionUserMovieDisplaySequence.tsv"
      filePathKey = "filePath"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      separator = "\t"
      innerFieldSeparator = ","
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "inactionUserMovieNotice"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "inactionUserMovieNoticeEval"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = [
        "tstamp", "userId", "movieId", "pageName", "pageSize", "row", "col", "dwell", "notice",
      ]
      timestampField = "fstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["stop", "lowRate"]
          valueAttr = "negative"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist", "stop", "lowRate"]
          valueAttr = "action"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.inaction.SequenceToStepExpander"
          nameAttrs = [
            "notice",
            "tstamp", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
            "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
            "positive", "negative", "action",
            "reason", "familiar", "when", "rate", "future", "skip",
          ]
          valueAttrs = [
            "notice",
            "tstamp", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
            "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
            "positive", "negative", "action",
            "reason", "familiar", "when", "rate", "future", "skip",
          ]
          excludedLabels = ["NoPop", "Invalid", "NotReached", "FreeText"]
          historyAttrs = [
            "notices",
            "tstamps", "sessionIds", "pageNames", "pageSizes", "dwells", "movieIds", "ranks",
            "clicks", "ratings", "highRates", "lowRates", "trailers", "wishlists", "hovers", "stops",
            "positives", "negatives", "actions",
            "reasons", "familiars", "whens", "rates", "futures", "skips",
          ]
          separator = ","
          joiner = ","
        }, {
          expanderClass = "org.grouplens.samantha.server.inaction.LabelExpander"
          labelAttr = "notice"
          modeledLabels = ["Noticed", "DidNotNotice", "NotDisplayed"]
          backward = false # eval part
        }
      ]
    }
  ]
  retrievers = []
  predictors = [
    {
      name = "noticeXGBoostPredictor"
      configClass = "org.grouplens.samantha.xgboost.XGBoostPredictorConfig"
      modelName = "noticeXGBoostPredictorModel"
      modelFile = ${samantha.modelDir}"/noticeXGBoostPredictorModel.bin"
      labelName = "noticeClass"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "TREE"
            attrName = "userId"
            feaName = "userId"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "TREE"
            attrName = "movieId"
            feaName = "movieId"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "TREE"
            attrName = "pageName"
            feaName = "pageName"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "TREE"
            attrName = "pageSize"
            feaName = "pageSize"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "TREE"
            attrName = "row"
            feaName = "row"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "TREE"
            attrName = "col"
            feaName = "col"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "TREE"
            attrName = "dwell"
            feaName = "dwell"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "CLASS"
            attrName = "notice"
            feaName = "noticeClass"
          }
        ]
      }
      features = ["userId", "movieId", ]
      numTrees = 500
      methodConfig {
        #objective = "binary:logistic"
        #eval_metric = "logloss"
        objective = "multi:softprob"
        eval_metric = "merror"
        num_class = 3
        verbose = false
        silent = 1
      }
    }
  ]
  others = [
    {
      name = "inactionXGBoostPredictor"
    }, {
      name = "futureXGBoostPredictor"
    }, {
      name = "actionFMPredictor"
    }, {
      name = "actionFMPredictorWithInaction"
    }, {
      name = "actionXGBoostPredictor"
    }, {
      name = "actionXGBoostPredictorWithInaction"
    }
  ]
  rankers = []
  recommenders = []
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
  evaluators = [
    {
      name = "BinaryClassificationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positive"
          labelKey = "labelAttr"
          aucType = "GLOBAL"
        }
      ]
    }, {
      name = "RecommendationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId"]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["movieIdEval"]
          recKeys = ["movieId"]
          #relevanceKey = "action"
          #threshold = 0.5
          N = [5, 8, 20, 24]
        }
      ]
    }
  ]
  schedulers = []
}
