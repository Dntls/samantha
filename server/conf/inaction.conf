samantha.inaction {
  engineType = "RECOMMENDER"
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "inactionTensorFlowFeaturizedJsonInteractionBatch"
      configClass = "org.grouplens.samantha.server.indexer.JsonFileIndexerConfig"
      indexType = "inactionTensorFlowFeaturizedJsonInteractionBatch100"
      filesKey = "files"
      timestampField = "timestamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "JsonFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "inactionUserInteractionSequenceTensorFlowBatch"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBatchIndexerConfig"
      dependedIndexer = "inactionTensorFlowFeaturizedJsonInteractionBatch"
      tensorFlowPredictor = "tensorFlowInteractionPredictor"
      tensorFlowModel = "tensorFlowInteractionPredictorModel"
      batchSize = 32
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "movieId", "rank", "rating", "click", "wishlist"]
          valueAttrs = ["tstamp", "movieId", "rank", "rating", "click", "wishlist"]
          separator = ","
          joiner = ","
          maxStepNum = 2400
          backward = true
        }
      ]
    }, {
      name = "inactionUserMovieDisplay"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "inactionUserMovieDisplay"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = [
        "tstamp", "userId", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
        "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
        "reason", "notice", "familiar", "when", "rate", "future", "skip",
      ]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "inactionGroupedUserMovieDisplay"
      configClass = "org.grouplens.samantha.server.indexer.GroupedIndexerConfig"
      dependedIndexer = "userMovieDisplay"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = [
        "tstamp", "userId", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
        "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
        "reason", "notice", "familiar", "when", "rate", "future", "skip",
      ]
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      groupKeys = ["userId"]
      orderFields = ["tstamp", "rank"]
      orderFieldsTypes = ["INT", "INT"]
      numBuckets = 500
      skip = true
      separator = "\t"
      dataDir = ${samantha.dataDir}"/inactionGroupedUserMovieDisplay"
      dataDirKey = "dataDir"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "inactionUserMovieDisplaySequence"
      configClass = "org.grouplens.samantha.server.tensorflow.UserSequenceIndexerConfig"
      dependedIndexer = "groupedUserMovieDisplay"
      groupKeys = ["userId"]
      otherDataFields = [
        "tstamp", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
        "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
        "reason", "notice", "familiar", "when", "rate", "future", "skip",
      ]
      filesKey = "files"
      filePath = ${samantha.dataDir}"/inactionUserMovieDisplaySequence.tsv"
      filePathKey = "filePath"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      separator = "\t"
      innerFieldSeparator = ","
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "inactionUserMovieSurvey"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "inactionUserMovieSurvey_lr10.0"
      timestampField = "tstamp"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = [
        "noticeSur", "whenSur", "reasonSur", "futureSur", "inactionSur", "skipSur", "detailInactionSur", "rateSur", "familiarSur", "actionPage", "predRateMeanBeforePage", "predClickMeanBeforePage", "namePage", "predRatingMedianBeforePage", "predRateAfterPage", "predRatingMinAfterPage", "medianSimPage", "predClickMedianAfterPage", "minSimPage", "predWishlistAfterPage", "ratingPage", "negativeRatePage", "wishlistRatePage", "predRatingAfterPage", "closestRowPage", "predWishlistMinBeforePage",
        "predRateMeanAfterPage", "predRatingBeforePage", "predDisplayBeforePage", "predRatingMeanBeforePage", "sizePage", "positiveRatePage", "predClickMinAfterPage", "clickRatePage", "closestColPage", "closestActionPage", "predDisplayMaxAfterPage", "predClickBeforePage", "predRatingMaxBeforePage", "wishlistPage", "predWishlistMedianAfterPage", "predRateMedianBeforePage", "lowRateRatePage", "predDisplayMinBeforePage", "stopRatePage", "stopPage", "predRateBeforePage",
        "negativePage", "predWishlistMeanAfterPage", "predClickMedianBeforePage", "highRateRatePage", "closestSimPage", "ratingRatePage", "predClickMeanAfterPage", "lowRatePage", "colPage", "predDisplayMaxBeforePage", "dwellPage", "predClickMaxAfterPage", "predRatingMedianAfterPage", "predWishlistMeanBeforePage", "hoverRatePage", "clickPage", "stateBeforePage", "highRatePage", "closestInvDistPage", "predRatingMeanAfterPage", "predWishlistMaxAfterPage",
        "maxSimPage", "predRateMinBeforePage", "actionRatePage", "rowPage", "predDisplayMedianBeforePage", "predRateMaxBeforePage", "predWishlistMaxBeforePage", "hoverPage", "predDisplayMeanBeforePage", "stateAfterPage", "positivePage", "meanSimPage", "predRatingMaxAfterPage", "predWishlistMinAfterPage", "predRateMedianAfterPage", "predDisplayMedianAfterPage", "predDisplayMinAfterPage", "predClickMinBeforePage", "predClickAfterPage", "predWishlistMedianBeforePage",
        "predWishlistBeforePage", "predDisplayAfterPage", "predRatingMinBeforePage", "predDisplayMeanAfterPage", "predClickMaxBeforePage", "predRateMaxAfterPage", "predRateMinAfterPage", "tstamp", "movieId", "hoverSess", "dwellPrevShowSess", "clickRateSess", "numShowSess", "stopRateSess", "highRateRateSess", "numReviewSess", "numFrontShowSess", "lowRateSess", "actionSess", "highRateSess", "numExploreShowSess", "numReviewOutSess", "wishlistRateSess", "sizePrevShowSess",
        "meanNumItemSess", "negativeRateSess", "ratingRateSess", "colPrevShowSess", "ratingSess", "negativeSess", "numFrontShowOutSess", "stopSess", "invReviewDistOutSess", "namePrevShowSess", "lengthSess", "rowPrevShowSess", "actionRateSess", "numExploreShowOutSess", "numShowOutSess", "wishlistSess", "invReviewDistSess", "lowRateRateSess", "positiveRateSess", "hoverRateSess", "clickSess", "numItemSess", "positiveSess", "actionHist", "highRateHist", "numItemHist",
        "hoverHist", "hoverRateHist", "meanNumItemHist", "lengthHist", "negativeHist", "stopHist", "positiveHist", "highRateRateHist", "ratingHist", "ratingRateHist", "negativeRateHist", "numShowHist", "actionRateHist", "wishlistRateHist", "numFrontShowHist", "wishlistHist", "positiveRateHist", "numReviewHist", "lowRateRateHist", "invReviewDistHist", "stopRateHist", "lowRateHist", "clickRateHist", "clickHist", "numExploreShowHist", "userId", "colPrev", "dwellPrev", "rowPrev",
        "namePrev", "sizePrev", "releaseYearItem", "actionItem", "popularityItem", "hoverItem",
        "state0BeforePage", "state1BeforePage", "state2BeforePage", "state3BeforePage", "state4BeforePage", "state5BeforePage", "state6BeforePage", "state7BeforePage", "state8BeforePage", "state9BeforePage", "state10BeforePage", "state11BeforePage", "state12BeforePage", "state13BeforePage", "state14BeforePage", "state15BeforePage", "state16BeforePage", "state17BeforePage", "state18BeforePage", "state19BeforePage", "state20BeforePage", "state21BeforePage", "state22BeforePage", "state23BeforePage", "state24BeforePage", "state25BeforePage", "state26BeforePage", "state27BeforePage", "state28BeforePage", "state29BeforePage", "state30BeforePage", "state31BeforePage",
        "state0AfterPage", "state1AfterPage", "state2AfterPage", "state3AfterPage", "state4AfterPage", "state5AfterPage", "state6AfterPage", "state7AfterPage", "state8AfterPage", "state9AfterPage", "state10AfterPage", "state11AfterPage", "state12AfterPage", "state13AfterPage", "state14AfterPage", "state15AfterPage", "state16AfterPage", "state17AfterPage", "state18AfterPage", "state19AfterPage", "state20AfterPage", "state21AfterPage", "state22AfterPage", "state23AfterPage", "state24AfterPage", "state25AfterPage", "state26AfterPage", "state27AfterPage", "state28AfterPage", "state29AfterPage", "state30AfterPage", "state31AfterPage",
      ]
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["stop", "lowRate"]
          valueAttr = "negative"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist", "stop", "lowRate"]
          valueAttr = "action"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.inaction.LabelExpander"
          labelAttr = "reason"
          excludedLabels = ["NoPop"]
          backward = false
        }
      ]
    }, {
      name = "inactionUserMoviePositiveTrain"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "inactionUserMoviePositiveTrain_lr10.0"
      timestampField = "tstamp"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["tstamp", "userId", "movieId", "inactionClass", "prevTstamp", "positive"]
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["stop", "lowRate"]
          valueAttr = "negative"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist", "stop", "lowRate"]
          valueAttr = "action"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.SequenceToStepExpander"
          nameAttrs = [
            "tstamp", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
            "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
            "positive", "negative", "action",
          ]
          valueAttrs = [
            "tstamp", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
            "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
            "positive", "negative", "action",
          ]
          historyAttrs = [
            "tstamps", "sessionIds", "pageNames", "pageSizes", "dwells", "movieIds", "ranks",
            "clicks", "ratings", "highRates", "lowRates", "trailers", "wishlists", "hovers", "stops",
            "positives", "negatives", "actions",
          ]
          separator = ","
          joiner = ","
          tstampAttr = "tstamp"
          #splitTstamp = 1514786400 #2018-01-01
          splitTstamp = 1517464800 #2018-02-01
          maxStepNum = 240
          backward = true
        }, {
          expanderClass = "org.grouplens.samantha.server.inaction.InferenceExpander"
          predictorName = "inactionXGBoostPredictor"
          modelName = "inactionXGBoostPredictorModel"
          labelAttr = "inactionClass"
          numClass = 7
          joiner = ","
        }
      ]
    }, {
      name = "inactionUserMoviePositiveEval"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "inactionUserMoviePositiveEval_lr10.0"
      timestampField = "tstamp"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["tstamp", "userId", "movieId", "inactionClass", "prevTstamp", "positive"]
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["stop", "lowRate"]
          valueAttr = "negative"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist", "stop", "lowRate"]
          valueAttr = "action"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.SequenceToStepExpander"
          nameAttrs = [
            "tstamp", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
            "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
            "positive", "negative", "action",
          ]
          valueAttrs = [
            "tstamp", "sessionId", "pageName", "pageSize", "dwell", "movieId", "rank",
            "click", "rating", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop",
            "positive", "negative", "action",
          ]
          historyAttrs = [
            "tstamps", "sessionIds", "pageNames", "pageSizes", "dwells", "movieIds", "ranks",
            "clicks", "ratings", "highRates", "lowRates", "trailers", "wishlists", "hovers", "stops",
            "positives", "negatives", "actions",
          ]
          separator = ","
          joiner = ","
          tstampAttr = "tstamp"
          #splitTstamp = 1514786400 #2018-01-01
          splitTstamp = 1517464800 #2018-02-01
          maxStepNum = 24
          backward = false
        }, {
          expanderClass = "org.grouplens.samantha.server.inaction.InferenceExpander"
          predictorName = "inactionXGBoostPredictor"
          modelName = "inactionXGBoostPredictorModel"
          labelAttr = "inactionClass"
          numClass = 7
          joiner = ","
        }
      ]
    }
  ]
  retrievers = [
    {
      name = "inactionXGBoostClassifierRetriever"
      configClass = "org.grouplens.samantha.xgboost.XGBoostClassifierRetrieverConfig"
      predictorName = "inactionXGBoostPredictor"
      modelName = "inactionXGBoostPredictorModel"
    }
  ]
  predictors = [
    {
      name = "ratingFMPredictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "ratingFMPredictorModel"
      modelFile = ${samantha.modelDir}"/ratingFMPredictorModel.bin"
      labelName = "rating"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieFactor"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.LogisticLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.01
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 20
        learningRate = 0.01
        cachePath = ${samantha.dataDir}
        numProcessors = 4
      }
      factDim = 32
      biasFeas = ["globalBias", "userBias", "movieBias"]
      ufactFeas = ["userFactor"]
      ifactFeas = ["movieFactor"]
    }, {
      name = "inactionXGBoostPredictor"
      configClass = "org.grouplens.samantha.xgboost.XGBoostPredictorConfig"
      modelName = "inactionXGBoostPredictorModel"
      modelFile = ${samantha.modelDir}"/inactionXGBoostPredictorModel.bin"
      labelName = "inactionClass"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.inaction.InactionExpander"
          labelAttr = "inactionSur"
          includedLabels = [
            "NotNoticed", "Watched", 
            "DecidedToWatch", "ExploreLater", "OthersBetter", "NotNow", "WouldNotEnjoy",
          ]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.inaction.TreeFeatureExtractorConfig"
            labelAttr = "inactionSur"
            labelClass = "inactionClass"
          }
        ]
      }
      features = [
        "hoverItem", "popularityItem", "releaseYearItem", "rowPage", "colPage", "dwellPage", "closestColPage",
        "closestInvDistPage", "positiveRatePage", "negativeRatePage",
        "ratingRatePage", "lowRateRatePage", "clickRatePage", "stopRatePage",
        "numReviewSess", "numFrontShowSess", "negativeRateSess", "lowRateRateSess",
        "stopRateSess", "lengthHist", "numShowHist", "negativeRateHist",
        "wishlistRateHist", "ratingRateHist", "highRateRateHist", "lowRateRateHist",
        "stopRateHist",

        "closestSimPage", "meanSimPage", "minSimPage", "maxSimPage", "medianSimPage",
        #"stateAfterPage",
        "predDisplayAfterPage", "predDisplayMeanAfterPage", "predDisplayMinAfterPage", "predDisplayMaxAfterPage", "predDisplayMedianAfterPage",
        "predRateAfterPage", "predRateMeanAfterPage", "predRateMinAfterPage", "predRateMaxAfterPage", "predRateMedianAfterPage",
        "predWishlistAfterPage", "predWishlistMeanAfterPage", "predWishlistMinAfterPage", "predWishlistMaxAfterPage", "predWishlistMedianAfterPage",
        "predClickAfterPage", "predClickMeanAfterPage", "predClickMinAfterPage", "predClickMaxAfterPage", "predClickMedianAfterPage",
        "predRatingAfterPage", "predRatingMeanAfterPage", "predRatingMinAfterPage", "predRatingMaxAfterPage", "predRatingMedianAfterPage",
      ]
      newFeatures = [
        "closestSimPage", "meanSimPage", "minSimPage", "maxSimPage", "medianSimPage",
        "stateBeforePage", "stateAfterPage",
        "predDisplayBeforePage", "predDisplayMeanBeforePage", "predDisplayMinBeforePage", "predDisplayMaxBeforePage", "predDisplayMedianBeforePage",
        "predRateBeforePage", "predRateMeanBeforePage", "predRateMinBeforePage", "predRateMaxBeforePage", "predRateMedianBeforePage",
        "predWishlistBeforePage", "predWishlistMeanBeforePage", "predWishlistMinBeforePage", "predWishlistMaxBeforePage", "predWishlistMedianBeforePage",
        "predClickBeforePage", "predClickMeanBeforePage", "predClickMinBeforePage", "predClickMaxBeforePage", "predClickMedianBeforePage",
        "predRatingBeforePage", "predRatingMeanBeforePage", "predRatingMinBeforePage", "predRatingMaxBeforePage", "predRatingMedianBeforePage",
        "predDisplayAfterPage", "predDisplayMeanAfterPage", "predDisplayMinAfterPage", "predDisplayMaxAfterPage", "predDisplayMedianAfterPage",
        "predRateAfterPage", "predRateMeanAfterPage", "predRateMinAfterPage", "predRateMaxAfterPage", "predRateMedianAfterPage",
        "predWishlistAfterPage", "predWishlistMeanAfterPage", "predWishlistMinAfterPage", "predWishlistMaxAfterPage", "predWishlistMedianAfterPage",
        "predClickAfterPage", "predClickMeanAfterPage", "predClickMinAfterPage", "predClickMaxAfterPage", "predClickMedianAfterPage",
        "predRatingAfterPage", "predRatingMeanAfterPage", "predRatingMinAfterPage", "predRatingMaxAfterPage", "predRatingMedianAfterPage",
      ]
      prevAllFeatures = [
        "actionPage", "lowRatePage", "colPage", "dwellPage", "namePage", "ratingPage", "negativeRatePage", "hoverRatePage", "highRatePage", "closestInvDistPage", "wishlistRatePage", "positiveRatePage", "actionRatePage", "closestRowPage", "rowPage", "clickPage", "hoverPage", "sizePage", "clickRatePage", "positivePage", "closestColPage", "closestActionPage", "wishlistPage", "lowRateRatePage", "stopRatePage", "stopPage", "highRateRatePage", "negativePage", "ratingRatePage", "movieId",
        "numFrontShowOutSess", "stopSess", "clickSess", "invReviewDistOutSess", "dwellPrevShowSess", "clickRateSess", "lengthSess", "numShowSess", "stopRateSess", "namePrevShowSess", "highRateRateSess", "numReviewSess", "hoverSess", "lowRateSess", "rowPrevShowSess", "numFrontShowSess", "actionRateSess", "numExploreShowOutSess", "actionSess", "numShowOutSess", "wishlistSess", "invReviewDistSess", "highRateSess", "lowRateRateSess", "numExploreShowSess", "numReviewOutSess", "wishlistRateSess",
        "ratingRateSess", "positiveRateSess", "sizePrevShowSess", "hoverRateSess", "meanNumItemSess", "numItemSess", "negativeRateSess", "positiveSess", "colPrevShowSess", "ratingSess", "negativeSess", "meanNumItemHist", "actionHist", "highRateHist", "actionRateHist", "numItemHist", "wishlistRateHist", "hoverRateHist", "hoverHist", "numFrontShowHist", "wishlistHist", "positiveRateHist", "numReviewHist", "lengthHist", "lowRateRateHist", "negativeHist", "clickRateHist", "stopHist", "positiveHist",
        "highRateRateHist", "invReviewDistHist", "stopRateHist", "ratingHist", "lowRateHist", "ratingRateHist", "negativeRateHist", "numShowHist", "clickHist", "numExploreShowHist", "userId", "namePrev", "sizePrev", "dwellPrev", "colPrev", "rowPrev", "hoverItem", "popularityItem", "releaseYearItem",
      ]
      selectedFeatures = [
        "hoverItem", "popularityItem", "releaseYearItem", "rowPage", "colPage", "dwellPage", "closestColPage",
        "closestInvDistPage", "positiveRatePage", "negativeRatePage",
        "ratingRatePage", "lowRateRatePage", "clickRatePage", "stopRatePage",
        "numReviewSess", "numFrontShowSess", "negativeRateSess", "lowRateRateSess",
        "stopRateSess", "lengthHist", "numShowHist", "negativeRateHist",
        "wishlistRateHist", "ratingRateHist", "highRateRateHist", "lowRateRateHist",
        "stopRateHist",
      ]
      numTrees = 20
      methodConfig {
        objective = "multi:softprob"
        #eval_metric = "mlogloss"
        eval_metric = "merror"
        num_class = 7
        verbose = false
        silent = 1
        max_depth = 3
        tree_method = "exact"
        alpha = 5.0
      }
    }, {
      name = "futureXGBoostPredictor"
      configClass = "org.grouplens.samantha.xgboost.XGBoostPredictorConfig"
      modelName = "futureXGBoostPredictorModel"
      modelFile = ${samantha.modelDir}"/futureXGBoostPredictorModel.bin"
      labelName = "futureClass"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.inaction.InactionExpander"
          labelAttr = "futureSur"
          includedLabels = ["RatherNot", "MaybeLater", "Sometimes", "Definitely"]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.inaction.TreeFeatureExtractorConfig"
            labelAttr = "futureSur"
            labelClass = "futureClass"
          }
        ]
      }
      allFeatures = ["actionPage", "lowRatePage", "colPage", "dwellPage", "namePage", "ratingPage", "negativeRatePage", "hoverRatePage", "highRatePage", "closestInvDistPage", "wishlistRatePage", "positiveRatePage", "actionRatePage", "closestRowPage", "rowPage", "clickPage", "hoverPage", "sizePage", "clickRatePage", "positivePage", "closestColPage", "closestActionPage", "wishlistPage", "lowRateRatePage", "stopRatePage", "stopPage", "highRateRatePage", "negativePage", "ratingRatePage", "movieId",
      "numFrontShowOutSess", "stopSess", "clickSess", "invReviewDistOutSess", "dwellPrevShowSess", "clickRateSess", "lengthSess", "numShowSess", "stopRateSess", "namePrevShowSess", "highRateRateSess", "numReviewSess", "hoverSess", "lowRateSess", "rowPrevShowSess", "numFrontShowSess", "actionRateSess", "numExploreShowOutSess", "actionSess", "numShowOutSess", "wishlistSess", "invReviewDistSess", "highRateSess", "lowRateRateSess", "numExploreShowSess", "numReviewOutSess", "wishlistRateSess",
      "ratingRateSess", "positiveRateSess", "sizePrevShowSess", "hoverRateSess", "meanNumItemSess", "numItemSess", "negativeRateSess", "positiveSess", "colPrevShowSess", "ratingSess", "negativeSess", "meanNumItemHist", "actionHist", "highRateHist", "actionRateHist", "numItemHist", "wishlistRateHist", "hoverRateHist", "hoverHist", "numFrontShowHist", "wishlistHist", "positiveRateHist", "numReviewHist", "lengthHist", "lowRateRateHist", "negativeHist", "clickRateHist", "stopHist", "positiveHist",
      "highRateRateHist", "invReviewDistHist", "stopRateHist", "ratingHist", "lowRateHist", "ratingRateHist", "negativeRateHist", "numShowHist", "clickHist", "numExploreShowHist", "userId", "namePrev", "sizePrev", "dwellPrev", "colPrev", "rowPrev", "hoverItem"]
      features = [
				"colPage", "dwellPage", "closestInvDistPage", "actionRatePage", 
				"positiveRatePage", "negativeRatePage", "wishlistRatePage", 
				"ratingRatePage", "highRateRatePage", "lowRateRatePage", "clickRatePage", 
				"stopRatePage", "hoverRatePage", "sizePrev", "sizePrevShowSess", 
				"dwellPrevShowSess", "invReviewDistSess", "lengthSess", "numReviewSess", 
				"numFrontShowSess", "numExploreShowSess", "numItemSess", "meanNumItemSess", 
				"actionRateSess", "positiveRateSess", "negativeRateSess", "wishlistRateSess", 
				"ratingRateSess", "highRateRateSess", "lowRateRateSess", "clickRateSess", 
				"stopRateSess", "hoverRateSess", "numFrontShowHist", "numReviewHist", 
				"lengthHist", "invReviewDistHist", "numShowHist", "numExploreShowHist", 
				"actionRateHist", "negativeRateHist", "wishlistRateHist", "ratingRateHist", 
				"highRateRateHist", "lowRateRateHist", "clickRateHist", "stopRateHist", 
				"hoverRateHist", "invReviewDistOutSess", "numExploreShowOutSess", 
				"numReviewOutSess",
      ]
      numTrees = 100
      methodConfig {
        objective = "multi:softprob"
        #eval_metric = "mlogloss"
        eval_metric = "merror"
        num_class = 4
        verbose = false
        silent = 1
        max_depth = 1
        tree_method = "exact"
        alpha = 3.0
      }
    }, {
      name = "positiveXGBoostPredictor"
      configClass = "org.grouplens.samantha.xgboost.XGBoostPredictorConfig"
      modelName = "positiveXGBoostPredictorModel"
      modelFile = ${samantha.modelDir}"/positiveXGBoostPredictorModel.bin"
      labelName = "positive"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "TREE"
            attrName = "userId"
            feaName = "userId"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "TREE"
            feaName = "movieId"
          }
        ]
      }
      features = ["userId", "movieId"]
      numTrees = 100
      methodConfig {
        objective = "binary:logistic"
        #eval_metric = "logloss"
        eval_metric = "auc"
        verbose = false
        silent = 1
      }
    }, {
      name = "positiveXGBoostPredictorWithInaction"
      configClass = "org.grouplens.samantha.xgboost.XGBoostPredictorConfig"
      modelName = "positiveXGBoostPredictorWithInactionModel"
      modelFile = ${samantha.modelDir}"/positiveXGBoostPredictorWithInactionModel.bin"
      labelName = "positive"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "TREE"
            attrName = "userId"
            feaName = "userId"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "TREE"
            feaName = "movieId"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedValueExtractorConfig"
            indexName = "TREE"
            attrName = "inactionClass"
            feaName = "inactionClass"
            separator = ","
          }
        ]
      }
      features = ["userId", "movieId", "inactionClass"]
      numTrees = 100
      methodConfig {
        objective = "binary:logistic"
        #eval_metric = "logloss"
        eval_metric = "auc"
        verbose = false
        silent = 1
      }
    }, {
      name = "positiveFMPredictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "positiveFMPredictorModel"
      modelFile = ${samantha.modelDir}"/positiveFMPredictorModel.bin"
      labelName = "positive"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieFactor"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.LogisticLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.01
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 20
        learningRate = 0.01
        cachePath = ${samantha.dataDir}
        numProcessors = 4
      }
      factDim = 32
      biasFeas = ["globalBias", "userBias", "movieBias"]
      ufactFeas = ["userFactor"]
      ifactFeas = ["movieFactor"]
    }, {
      name = "positiveFMPredictorWithInaction"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "positiveFMPredictorWithInactionModel"
      modelFile = ${samantha.modelDir}"/positiveFMPredictorWithInactionModel.bin"
      labelName = "positive"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedValueExtractorConfig"
            indexName = "BIASES"
            attrName = "inactionClass"
            feaName = "inactionBias"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "inactionClass"
            feaName = "inactionFactor"
            separator = ","
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.LogisticLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.01
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 20
        learningRate = 0.01
        cachePath = ${samantha.dataDir}
        numProcessors = 4
      }
      factDim = 32
      biasFeas = ["globalBias", "userBias", "movieBias", "inactionBias"]
      ufactFeas = ["userFactor", "inactionFactor"]
      ifactFeas = ["movieFactor", "inactionFactor"]
    }, {
      name = "tensorFlowInteractionPredictor"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowPredictorConfig"
      modelName = "tensorFlowInteractionPredictorModel"
      modelFile = ${samantha.modelDir}"/tensorFlowInteractionPredictorModel.bin"
      modelExportDir = ${samantha.modelDir}"/inaction_tensorflow_interaction.model"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = []
      updateOper = "update_op"
      lossOper = "metrics/train_loss_op"
      initOper = "init_op"
      outputOper = "prediction/item_prob_op"
      topKOper = "prediction/item_top_k_op"
      topKId = "topKId"
      topKValue = "topKValue"
      itemIndex = "MOVIE_ID"
      indexKeys = [
        "USER_ID", "MOVIE_ID", "TSTAMP", "SEQ_LEN",
        "RATE", "WISHLIST", "CLICK", "RATING",
        "DIS_ACT",
      ]
      equalSizeChecks = [
        {
          "featuresWithEqualSizes": ["display", "rate", "wishlist", "click", "rating", "tstamp"]
        }, {
          "featuresWithEqualSizes": ["disact", "tstamp"]
        }, {
          "featuresWithEqualSizes": ["user", "sequence_length"]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "USER_ID"
            attrName = "userId"
            feaName = "user"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.DisplayActionGroupExtractorConfig"
            index = "MOVIE_ID"
            sizeFeaIndex = "SEQ_LEN"
            attr = "movieId"
            inGrpRank = "rank"
            fea = "display"
            sizeFea = "sequence_length"
            extractBools = [false, false, false]
            actionIndices = ["CLICK", "WISHLIST", "RATE"]
            actionAttrs = ["click", "wishlist", "rating"]
            actionFeas = ["click", "wishlist", "rate"]
            displayActionIndex = "DIS_ACT"
            displayActionFea = "disact"
            separator = ","
            normalize = false
            grpSize = 24
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityGroupExtractorConfig"
            indexName = "RATING"
            attrName = "rating"
            feaName = "rating"
            separator = ","
            grpSize = 24
            normalize = false
            inGrpRankName = "rank"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityGroupExtractorConfig"
            indexName = "TSTAMP"
            attrName = "tstamp"
            feaName = "tstamp"
            separator = ","
            grpSize = 24
            normalize = false
            inGrpRankName = "rank"
          }
        ]
      }
      feedFeas = [
        "user_idx", "sequence_length_val", "disact_idx", "tstamp_val",
        "display_idx", "click_idx", "wishlist_idx", "rate_idx", "rating_val",
      ]
      onlineMethodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        numProcessors = 2
      }
      methodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        maxIter = 20
        numProcessors = 2
      }
    }
  ]
  rankers = [
    {
      name = "inactionXGBoostBasedRanker"
      configClass = "org.grouplens.samantha.server.ranker.EntityFieldRankerConfig"
      orderField = "classProb"
    }
  ]
  recommenders = [
    {
      name = "inactionXGBoostBasedRecommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "inactionXGBoostClassifierRetriever"
      ranker = "inactionXGBoostBasedRanker"
    }
  ]
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
  evaluators = [
    {
      name = "binaryClassificationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      expandersConfig = [
      ]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positive"
          aucType = "GLOBAL"
        }
      ]
    }, {
      name = "inactionRankingEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId", "tstamp"]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["inactionSur"]
          recKeys = ["inactionSur"]
          N = [1]
        }
      ]
    }, {
      name = "recommendationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId"]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["movieIdEval"]
          recKeys = ["movieId"]
          #relevanceKey = "action"
          #threshold = 0.5
          N = [5, 8, 20, 24]
        }
      ]
    }
  ]
  schedulers = []
}
