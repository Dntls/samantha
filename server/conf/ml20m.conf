samantha.entityDaosConfig.TimeFilteredDAO {
  daoConfigClass = "org.grouplens.samantha.server.dao.TimeFilteredDAOConfig"
  entityDaosConfig = ${samantha.simpleDaosConfig}
  timestampField = "timestamp"
  beginTimeKey = "beginTime"
  endTimeKey = "endTime"
  subDaoConfigKey = "subDaoConfig"
}

samantha.ml20m {
  engineType = "RECOMMENDER"
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "tensorFlowFeaturizedJsonBatch"
      configClass = "org.grouplens.samantha.server.indexer.JsonFileIndexerConfig"
      indexType = "ml20mTensorFlowFeaturizedJsonBatchTstampTest"
      filesKey = "files"
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "JsonFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "featurizedItemAttributeRelation"
      configClass = "org.grouplens.samantha.server.indexer.JsonFileIndexerConfig"
      indexType = "ml20mFeaturizedItemAttributeRelationTstampTest"
      filesKey = "files"
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "JsonFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "userMovieRating"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "ml20mUserMovieRating"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["timestamp", "userId", "movieId", "genre", "tag", "rating"]
      timestampField = "timestamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.TFIDFKnnExpander"
          modelName = "ml20mTFIDFMovieGenreKnnModel"
          itemAttrs = ["movieId"]
          feaAttr = "genre"
          scoreAttr = "genreTFIDF"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.MapItemId2InfoExpander"
          modelName = "ml20mMovieTagInfoModel"
          idField = "movieId"
          infoFields = ["tag"]
        }
      ]
    }, {
      name = "movieData"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "ml20mMovieData"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["timestamp", "movieId", "genre", "tag"]
      timestampField = "timestamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.TFIDFKnnExpander"
          modelName = "ml20mTFIDFMovieGenreKnnModel"
          itemAttrs = ["movieId"]
          feaAttr = "genre"
          scoreAttr = "genreTFIDF"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.MapItemId2InfoExpander"
          modelName = "ml20mMovieTagInfoModel"
          idField = "movieId"
          infoFields = ["tag"]
        }
      ]
    }, {
      name = "groupedUserMovieRating"
      configClass = "org.grouplens.samantha.server.indexer.GroupedIndexerConfig"
      dependedIndexer = "userMovieRating"
      dataFields = ["timestamp", "userId", "movieId", "genre", "tag", "rating"]
      filesKey = "files"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      groupKeys = ["userId"]
      orderFields = ["timestamp"]
      orderFieldsTypes = ["INT"]
      numBuckets = 100
      skip = false
      separator = "\t"
      dataDir = ${samantha.dataDir}"/ml20mGroupedUserMovieRating"
      dataDirKey = "dataDir"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userMovieRatingSequence"
      configClass = "org.grouplens.samantha.server.tensorflow.UserSequenceIndexerConfig"
      dependedIndexer = "groupedUserMovieRating"
      groupKeys = ["userId"]
      otherDataFields = ["timestamp", "movieId", "genre", "tag", "rating"]
      filesKey = "files"
      filePath = ${samantha.dataDir}"/ml20mUserMovieRatingSequence.tsv"
      filePathKey = "filePath"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      separator = "\t"
      innerFieldSeparator = "|"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userSequenceTensorFlowBatch"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBatchIndexerConfig"
      dependedIndexer = "tensorFlowFeaturizedJsonBatch"
      tensorFlowPredictor = "ml20mTensorFlowRatePredictor"
      tensorFlowModel = "ml20mTensorFlowRatePredictorModel"
      timestampField = "tstamp"
      batchSize = 32
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["timestamp", "movieId", "tag", "genre", "rating"]
          valueAttrs = ["timestamp", "movieId", "tag", "genre", "rating"]
          separator = "\\|"
          joiner = "|"
          maxStepNum = 500
          backward = true
        }
      ]
    }, {
      name = "itemAttributeTensorFlowBatch"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBatchIndexerConfig"
      dependedIndexer = "featurizedItemAttributeRelation"
      tensorFlowPredictor = "ml20mTensorFlowRatePredictor"
      tensorFlowModel = "ml20mTensorFlowRatePredictorModel"
      timestampField = "tstamp"
      batchSize = 32
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }
  ]
  retrievers = [
   {
      name = "ml20mTensorFlowRatePredictorRetriever"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBasedRetrieverConfig"
      predictorName = "ml20mTensorFlowRatePredictor"
      modelName = "ml20mTensorFlowRatePredictorModel"
   }
  ]
  predictors = [
    {
      name = "ml20mTensorFlowRatePredictor"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowPredictorConfig"
      modelName = "ml20mTensorFlowRatePredictorModel"
      modelFile = ${samantha.modelDir}"/ml20mTensorFlowRatePredictorModel.bin"
      modelExportDir = ${samantha.modelDir}"/ml20m_tensorflow_rate.model"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = []
      updateOper = "update_op"
      lossOper = "metrics/train_loss_op"
      initOper = "init_op"
      outputOper = "prediction/item_pred_op"
      topKOper = "prediction/item_top_k_op"
      topKId = "topKId"
      topKValue = "topKValue"
      itemIndex = "MOVIE_ID"
      indexKeys = ["USER_ID", "MOVIE_ID", "TAG", "GENRE", "SEQ_LEN", "TSTAMP"]
      predItemFea = "item_eval"
#      equalSizeChecks = [
#        {
#          "featuresWithEqualSizes": ["item", "tag", "genre"]
#        }, {
#          "featuresWithEqualSizes": ["user", "sequence_length"]
#        }
#      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "USER_ID"
            attrName = "userId"
            feaName = "user"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultipleSeparatedStringExtractorConfig"
            indexNames = ["MOVIE_ID", "TAG", "GENRE"]
            attrNames = ["movieId", "tag", "genre"]
            feaNames = ["item", "tag", "genre"]
            separator = "\\|"
            normalize = false
            #fillIn = ""
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringSizeExtractorConfig"
            indexName = "SEQ_LEN"
            attrName = "movieId"
            feaName = "sequence_length"
            separator = "|"
            #alwaysExtract = true
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityExtractorConfig"
            indexName = "TSTAMP"
            attrName = "timestamp"
            feaName = "tstamp"
            separator = "\\|"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "MOVIE_ID"
            attrName = "movieIdEval"
            keyPrefix = "movieId"
            feaName = "item_eval"
            separator = "\\|"
            normalize = false
          }
        ]
      }
      onlineMethodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
      }
      methodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        maxIter = 20
      }
    }
  ]
  rankers = [
    {
      name = "ml20mTensorFlowBasedRanker"
      configClass = "org.grouplens.samantha.server.ranker.EntityFieldRankerConfig"
      orderField = "topKValue"
    }
  ]
  recommenders = [
    {
      name = "ml20mTensorFlowRateRecommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "ml20mTensorFlowRatePredictorRetriever"
      ranker = "ml20mTensorFlowBasedRanker"
    }
  ]
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
  evaluators = [
    {
      name = "RateSampledAUCEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      labelAttr = "rateEval"
      separator = "\\|"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["timestamp"]
          valueAttr = "rate"
          separator = "\\|"
          joiner = "|"
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["timestamp", "movieId", "tag", "genre", "rate"]
          valueAttrs = ["timestamp", "movieId", "tag", "genre", "rate"]
          separator = "\\|"
          joiner = "|"
          maxStepNum = 500
          backward = true
        }, {
          #expanderClass = "org.grouplens.samantha.server.expander.SequenceTstampSplitExpander"
          expanderClass = "org.grouplens.samantha.server.expander.SequenceStepSplitExpander"
          nameAttrs = ["movieId", "timestamp", "tag", "genre", "rate"]
          beforeAttrs = ["movieId", "timestamp", "tag", "genre", "rate"]
          afterAttrs = ["movieIdEval", "timestampEval", "tagEval", "genreEval", "rateEval"]
          trainSteps = 500
          evalSteps = 1
          separator = "\\|"
          joiner = "|"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.NegativeSamplingExpander"
          predictorName = "ml20mTensorFlowRatePredictor"
          modelName = "ml20mTensorFlowRatePredictorModel"
          keyPrefix = "movieId"
          itemAttr = "movieIdEval"
          labelAttr = "rateEval"
          itemIndex = "MOVIE_ID"
          separator = "\\|"
          joiner = "|"
          #maxNumSample = 2000
        }
      ]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "rateEval"
          labelKey = "labelName"
          aucType = "GLOBAL"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "rateEval"
          labelKey = "labelName"
          aucType = "PERGROUP"
        }
      ]
    }, {
      name = "RecommendationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId"]
      itemKeys = ["movieIdEval"]
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["timestamp"]
          valueAttr = "rate"
          separator = "\\|"
          joiner = "|"
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["timestamp", "movieId", "tag", "genre", "rate"]
          valueAttrs = ["timestamp", "movieId", "tag", "genre", "rate"]
          separator = "\\|"
          joiner = "|"
          maxStepNum = 500
          backward = true
        }, {
          #expanderClass = "org.grouplens.samantha.server.expander.SequenceTstampSplitExpander"
          expanderClass = "org.grouplens.samantha.server.expander.SequenceStepSplitExpander"
          nameAttrs = ["movieId", "timestamp", "tag", "genre", "rate"]
          beforeAttrs = ["movieId", "timestamp", "tag", "genre", "rate"]
          afterAttrs = ["movieIdEval", "timestampEval", "tagEval", "genreEval", "rateEval"]
          trainSteps = 500
          evalSteps = 1
          separator = "\\|"
          joiner = "|"
        }
      ]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["movieIdEval"]
          recKeys = ["movieId"]
          N = [1, 5, 8, 15, 20, 24]
        }
      ]
    }
  ]
  schedulers = []
}
