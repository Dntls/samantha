samantha.behance {
  engineType = "RECOMMENDER"
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "tensorFlowFeaturizedJsonBatch"
      configClass = "org.grouplens.samantha.server.indexer.JsonFileIndexerConfig"
      indexType = "behanceTensorFlowFeaturizedJsonBatchTstampTest"
      filesKey = "files"
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "JsonFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "featurizedItemAttributeRelation"
      configClass = "org.grouplens.samantha.server.indexer.JsonFileIndexerConfig"
      indexType = "behanceFeaturizedItemAttributeRelationTstampTest"
      filesKey = "files"
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "JsonFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "userItemAppreciate"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "behanceUserItemAppreciate"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["tstamp", "userId", "itemId", "ownerId"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.MapItemId2InfoExpander"
          modelName = "behanceTFIDFItemInfoModel"
          modelFile = ${samantha.modelDir}"/behanceTFIDFItemInfoModel.bin"
          idField = "itemId"
          infoFields = ["ownerId"]
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.entityDaosConfig}
        }
      ]
    }, {
      name = "groupedUserItemAppreciate"
      configClass = "org.grouplens.samantha.server.indexer.GroupedIndexerConfig"
      dependedIndexer = "userItemAppreciate"
      dataFields = ["tstamp", "userId", "itemId", "ownerId"]
      filesKey = "files"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      groupKeys = ["userId"]
      orderFields = ["tstamp"]
      orderFieldsTypes = ["INT"]
      numBuckets = 500
      skip = false
      separator = "\t"
      dataDir = ${samantha.dataDir}"/behanceGroupedUserItemAppreciate"
      dataDirKey = "dataDir"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userItemAppreciateSequence"
      configClass = "org.grouplens.samantha.server.tensorflow.UserSequenceIndexerConfig"
      dependedIndexer = "groupedUserItemAppreciate"
      groupKeys = ["userId"]
      otherDataFields = ["tstamp", "itemId", "ownerId"]
      filesKey = "files"
      filePath = ${samantha.dataDir}"/behanceUserItemAppreciateSequence.tsv"
      filePathKey = "filePath"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      separator = "\t"
      innerFieldSeparator = ","
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userSequenceTensorFlowBatch"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBatchIndexerConfig"
      dependedIndexer = "tensorFlowFeaturizedJsonBatch"
      tensorFlowPredictor = "behanceTensorFlowAppreciatePredictor"
      tensorFlowModel = "behanceTensorFlowAppreciatePredictorModel"
      timestampField = "tstamp"
      batchSize = 32
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "itemId", "ownerId"]
          valueAttrs = ["tstamp", "itemId", "ownerId"]
          separator = ","
          joiner = ","
          maxStepNum = 500
          backward = true
        }
      ]
    }, {
      name = "itemAttributeTensorFlowBatch"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBatchIndexerConfig"
      dependedIndexer = "featurizedItemAttributeRelation"
      tensorFlowPredictor = "behanceTensorFlowAppreciatePredictor"
      tensorFlowModel = "behanceTensorFlowAppreciatePredictorModel"
      timestampField = "tstamp"
      batchSize = 32
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }
  ]
  retrievers = [
   {
      name = "behanceTensorFlowAppreciatePredictorRetriever"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBasedRetrieverConfig"
      predictorName = "behanceTensorFlowAppreciatePredictor"
      modelName = "behanceTensorFlowAppreciatePredictorModel"
   }
  ]
  predictors = [
    {
      name = "behanceTensorFlowAppreciatePredictor"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowPredictorConfig"
      modelName = "behanceTensorFlowAppreciatePredictorModel"
      modelFile = ${samantha.modelDir}"/behanceTensorFlowAppreciatePredictorModel.bin"
      modelExportDir = ${samantha.modelDir}"/behance_tensorflow_appreciate.model"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = []
      updateOper = "update_op"
      lossOper = "metrics/train_loss_op"
      initOper = "init_op"
      outputOper = "prediction/item_pred_op"
      topKOper = "prediction/item_top_k_op"
      topKId = "topKId"
      topKValue = "topKValue"
      itemIndex = "ITEM_ID"
      indexKeys = ["USER_ID", "ITEM_ID", "OWNER_ID", "SEQ_LEN", "TSTAMP"]
      predItemFea = "item_eval"
#      equalSizeChecks = [
#        {
#          "featuresWithEqualSizes": ["item", "owner"]
#        }, {
#          "featuresWithEqualSizes": ["user", "sequence_length"]
#        }
#      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "USER_ID"
            attrName = "userId"
            feaName = "user"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "ITEM_ID"
            attrName = "itemId"
            feaName = "item"
            separator = ","
            normalize = false
            #fillIn = ""
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "OWNER_ID"
            attrName = "ownerId"
            feaName = "owner"
            separator = ","
            normalize = false
            #fillIn = ""
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringSizeExtractorConfig"
            indexName = "SEQ_LEN"
            attrName = "itemId"
            feaName = "sequence_length"
            separator = ","
            #alwaysExtract = true
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityExtractorConfig"
            indexName = "TSTAMP"
            attrName = "tstamp"
            feaName = "tstamp"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "ITEM_ID"
            attrName = "itemIdEval"
            keyPrefix = "itemId"
            feaName = "item_eval"
            separator = ","
            normalize = false
          }
        ]
      }
      onlineMethodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
      }
      methodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        maxIter = 20
      }
    }
  ]
  rankers = [
    {
      name = "behanceTensorFlowBasedRanker"
      configClass = "org.grouplens.samantha.server.ranker.EntityFieldRankerConfig"
      orderField = "topKValue"
    }
  ]
  recommenders = [
    {
      name = "behanceTensorFlowAppreciateRecommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "behanceTensorFlowAppreciatePredictorRetriever"
      ranker = "behanceTensorFlowBasedRanker"
    }
  ]
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
  evaluators = [
    {
      name = "AppreciateSampledAUCEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      labelAttr = "appreciateEval"
      separator = ","
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["tstamp"]
          valueAttr = "appreciate"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "itemId", "ownerId", "appreciate"]
          valueAttrs = ["tstamp", "itemId", "ownerId", "appreciate"]
          separator = ","
          joiner = ","
          maxStepNum = 500
          backward = true
        }, {
          #expanderClass = "org.grouplens.samantha.server.expander.SequenceTstampSplitExpander"
          expanderClass = "org.grouplens.samantha.server.expander.SequenceStepSplitExpander"
          nameAttrs = ["itemId", "tstamp", "ownerId", "appreciate"]
          beforeAttrs = ["itemId", "tstamp", "ownerId", "appreciate"]
          afterAttrs = ["itemIdEval", "tstampEval", "ownerIdEval", "appreciateEval"]
          #tstampAttr = "tstamp"
          #splitTstamp = 1320123600  # 2011-11-01
          trainSteps = 500
          evalSteps = 1
          separator = ","
          joiner = ","
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.NegativeSamplingExpander"
          predictorName = "behanceTensorFlowAppreciatePredictor"
          modelName = "behanceTensorFlowAppreciatePredictorModel"
          keyPrefix = "itemId"
          itemAttr = "itemIdEval"
          labelAttr = "appreciateEval"
          itemIndex = "ITEM_ID"
          separator = ","
          joiner = ","
          #maxNumSample = 2000
        }
      ]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "appreciateEval"
          labelKey = "labelName"
          aucType = "GLOBAL"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "appreciateEval"
          labelKey = "labelName"
          aucType = "PERGROUP"
        }
      ]
    }, {
      name = "RecommendationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId"]
      itemKeys = ["itemIdEval"]
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["tstamp"]
          valueAttr = "appreciate"
          separator = ","
          joiner = ","
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "itemId", "ownerId", "appreciate"]
          valueAttrs = ["tstamp", "itemId", "ownerId", "appreciate"]
          separator = ","
          joiner = ","
          maxStepNum = 500
          backward = true
        }, {
          #expanderClass = "org.grouplens.samantha.server.expander.SequenceTstampSplitExpander"
          expanderClass = "org.grouplens.samantha.server.expander.SequenceStepSplitExpander"
          nameAttrs = ["itemId", "tstamp", "ownerId", "appreciate"]
          beforeAttrs = ["itemId", "tstamp", "ownerId", "appreciate"]
          afterAttrs = ["itemIdEval", "tstampEval", "ownerIdEval", "appreciateEval"]
          #tstampAttr = "tstamp"
          #splitTstamp = 1320123600  # 2011-11-01
          trainSteps = 500
          evalSteps = 1
          separator = ","
          joiner = ","
        }
      ]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["itemIdEval"]
          recKeys = ["itemId"]
          N = [1, 5, 8, 15, 20, 24]
        }
      ]
    }
  ]
  schedulers = []
}
