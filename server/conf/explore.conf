samantha.experiment {
  engineType = "RECOMMENDER"
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "userMovieRating"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "expt-userMovieRating"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "rating", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userMovieAction"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "expt-userMovieAction"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "action", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userMovieSkipping"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "expt-userMovieSkipping"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = [
        "finalActed", "finalAction", "maxDistInv", "minDistRank",
        "movieId", "pageActed", "pageName", "prevFront", "prevSum",
        "prevTop", "rank", "sessionIdx", "sexploreOther",
        "sexplorePrediction", "sexploreSearch", "sexploreTopPicks",
        "sfrontPage", "smovieDetailPage", "srating", "uexploreOther",
        "uexplorePrediction", "uexploreSearch", "uexploreTopPicks",
        "ufrontPage", "umovieDetailPage", "urating", "userId",
        "whetherClicked", "whetherWishlisted", "predRating", "predAction", "tstamp",
      ]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "expt-rating-predictor"
          scoreAttr = "predRating"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "expt-action-predictor"
          scoreAttr = "predAction"
        }
      ]
    }
  ]
  retrievers = [
    {
      name = "expt-feature-support-movie-retriever"
      configClass = "org.grouplens.samantha.server.retriever.FeatureSupportRetrieverConfig"
      modelName = "expt-feature-support-model"
      modelFile = ${samantha.modelDir}"/exptFeatureSupportModel.bin"
      maxHits = 1000
      itemAttrs = ["movieId"]
      supportAttr = "support"
      svdfeaPredictorName = "expt-action-predictor"
      svdfeaModelName = "expt-action-predictor-model"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.RequestBasedExpander"
          requestFields = ["userId"]
        }
      ]
    }
  ]
  predictors = [
    {
      name = "expt-rating-predictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "expt-rating-predictor-model"
      modelFile = ${samantha.modelDir}"/expt-rating-predictor-model.bin"
      labelName = "rating"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["RealPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieFactor"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.L2NormLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 0.01
        l2coef = 0.0
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        cachePath = ${samantha.dataDir}
        numProcessors = 4
        learningRate = 0.01
        l2coef = 0.0
        maxIter = 3
      }
      factDim = 30
      biasFeas = ["globalBias", "userBias", "movieBias"]
      ufactFeas = ["userFactor"]
      ifactFeas = ["movieFactor"]
    }, {
      name = "expt-action-predictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "expt-action-predictor-model"
      modelFile = ${samantha.modelDir}"/expt-action-predictor-model.bin"
      labelName = "action"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["BinaryPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "rank"
            indexName = "BIASES"
            feaName = "rankBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SelfPlusOneRatioExtractorConfig"
            attrName = "dwell"
            indexName = "BIASES"
            feaName = "dwellBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "rank"
            indexName = "FACTORS"
            feaName = "rankFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SelfPlusOneRatioExtractorConfig"
            attrName = "dwell"
            indexName = "FACTORS"
            feaName = "dwellFactor"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.LogisticLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 0.01
        l2coef = 0.0
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        cachePath = ${samantha.dataDir}
        numProcessors = 4
        learningRate = 0.001
        l2coef = 0.0
        maxIter = 50
      }
      factDim = 30
      biasFeas = ["globalBias", "userBias", "movieBias", "rankBias", "dwellBias"]
      ufactFeas = ["userFactor"]
      ifactFeas = ["movieFactor", "rankFactor", "dwellFactor"]
    }, {
      name = "expt-tf-action-predictor"
      configClass = "org.grouplens.samantha.server.predictor.TensorFlowPredictorConfig"
      modelName = "expt-tf-action-predictor-model"
      modelFile = ${samantha.modelDir}"/expt-tf-action-predictor-model.bin"
      graphDefFilePath = ${samantha.modelDir}"/tensorflow.graph"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = []
      updateOperationName = "update_op"
      lossOperationName = "loss_op"
      initOperationName = "init_op"
      outputOperationName = "pred_op"
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "TENSOR_FLOW"
            attrName = "userId"
            feaName = "userIdx"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "TENSOR_FLOW"
            attrName = "movieIds"
            feaName = "movieIdxs"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "TENSOR_FLOW"
            attrName = "movieId"
            feaName = "movieIdx"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityExtractorConfig"
            indexName = "TENSOR_FLOW"
            attrName = "actions"
            feaName = "actions"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityExtractorConfig"
            indexName = "TENSOR_FLOW"
            attrName = "weights"
            feaName = "weights"
            separator = ","
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "TENSOR_FLOW"
            attrName = "dwell"
            feaName = "dwell"
          }
        ]
      }
      name2intfeas {
        uid_input = ["userIdx"]
        mid_input = ["movieIdxs"]
        pid_input = ["movieIdx"]
      }
      name2doublefeas {
        dwell_input = ["dwell"]
        labels = ["actions"]
      }
      onlineMethodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
      }
      methodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        maxIter = 20
      }
    }
  ]
  rankers = [
    {
      name = "expt-action-based-ranker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "expt-action-predictor"
      pageSize = 24
    }, {
      name = "expt-tf-action-based-ranker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "expt-tf-action-predictor"
      pageSize = 24
    }
  ]
  recommenders = [
    {
      name = "expt-action-based-recommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "expt-feature-support-movie-retriever"
      ranker = "expt-action-based-ranker"
    }, {
      name = "expt-tf-action-based-recommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "expt-feature-support-movie-retriever"
      ranker = "expt-tf-action-based-ranker"
    }
  ]
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
  evaluators = [
    {
      name = "RealPredictionEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAEConfig"
          labelName = "rating"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.RMSEConfig"
          labelName = "rating"
        }
      ]
    }, {
      name = "BinaryPredictionEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "action"
          aucType = "GLOBAL"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "action"
          aucType = "PERGROUP"
        }
      ]
    }, {
      name = "RecommendationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId"]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["movieId"]
          relevanceKey = "action"
          threshold = 0.5
          N = [8, 24]
        }
      ]
    }
  ]
  schedulers = []
}
