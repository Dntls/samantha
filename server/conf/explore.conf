samantha.explore {
  engineType = "RECOMMENDER"
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "tensorFlowFeaturizedJsonDisplayBatch"
      configClass = "org.grouplens.samantha.server.indexer.JsonFileIndexerConfig"
      indexType = "exploreTensorFlowFeaturizedJsonDisplayBatch100Test"
      filesKey = "files"
      timestampField = "timestamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "JsonFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "tensorFlowFeaturizedJsonPositiveBatch"
      configClass = "org.grouplens.samantha.server.indexer.JsonFileIndexerConfig"
      indexType = "exploreTensorFlowFeaturizedJsonPositiveBatch100Test"
      filesKey = "files"
      timestampField = "timestamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "JsonFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "userMovieDisplay"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "exploreUserMovieDisplay"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = [
        "tstamp", "userId", "movieId", "rank", "click", "highRate", "lowRate", "trailer",
        "wishlist", "hover", "stop"
      ]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "groupedUserMovieDisplay"
      configClass = "org.grouplens.samantha.server.indexer.GroupedIndexerConfig"
      dependedIndexer = "userMovieDisplay"
      dataFields = [
        "tstamp", "userId", "movieId", "rank", "click", "highRate", "lowRate", "trailer",
        "wishlist", "hover", "stop"
      ]
      filesKey = "files"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      groupKeys = ["userId"]
      orderFields = ["tstamp", "rank"]
      orderFieldsTypes = ["INT", "INT"]
      numBuckets = 100
      skip = true
      separator = "\t"
      dataDir = ${samantha.dataDir}"/exploreGroupedUserMovieDisplay"
      dataDirKey = "dataDir"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userMovieDisplaySequence"
      configClass = "org.grouplens.samantha.server.tensorflow.UserSequenceIndexerConfig"
      dependedIndexer = "groupedUserMovieDisplay"
      groupKeys = ["userId"]
      otherDataFields = [
        "tstamp", "movieId", "rank", "click", "highRate", "lowRate", "trailer",
        "wishlist", "hover", "stop"
      ]
      filesKey = "files"
      filePath = ${samantha.dataDir}"/userMovieDisplaySequence.tsv"
      filePathKey = "filePath"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      separator = "\t"
      innerFieldSeparator = "|"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userDisplaySequenceTensorFlowBatch"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBatchIndexerConfig"
      dependedIndexer = "tensorFlowFeaturizedJsonDisplayBatch"
      tensorFlowPredictor = "exploreMTBIPredictor"
      tensorFlowModel = "exploreMTBIPredictorModel"
      batchSize = 32
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = "\\|"
          joiner = "|"
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "movieId", "rank", "positive"]
          valueAttrs = ["tstamp", "movieId", "rank", "positive"]
          separator = "\\|"
          joiner = "|"
          maxStepNum = 2400
          backward = false
        }
      ]
    }, {
      name = "userPositiveSequenceTensorFlowBatch"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBatchIndexerConfig"
      dependedIndexer = "tensorFlowFeaturizedJsonPositiveBatch"
      tensorFlowPredictor = "exploreSequencePredictor"
      tensorFlowModel = "exploreSequencePredictorModel"
      batchSize = 32
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = "\\|"
          joiner = "|"
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "movieId", "positive", "rank"]
          valueAttrs = ["tstamp", "movieId", "positive", "rank"]
          separator = "\\|"
          joiner = "|"
          maxStepNum = 2400
          backward = false
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.Display2ActionExpander"
          nameAttrs = ["tstamp", "movieId"]
          valueAttrs = ["tstampAct", "movieIdAct"]
          actionName = "positive"
          separator = "\\|"
          joiner = "|"
          alwaysInclude = true
        }
      ]
    }, {
      name = "userMovieDisplayExpt"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "exploreUserMovieDisplayExpt"
      filesKey = "files"
      separatorKey = "separator"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = "\\|"
          joiner = "|"
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "movieId", "rank", "positive"]
          valueAttrs = ["tstamp", "movieId", "rank", "positive"]
          separator = "\\|"
          joiner = "|"
          maxStepNum = 2400
          backward = false
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.SequenceToStepExpander"
          nameAttrs = ["tstamp", "movieId", "rank", "positive"]
          valueAttrs = ["tstamp", "movieId", "rank", "positive"]
          otherAttrs = ["userId"]
          separator = "\\|"
        }
      ]
      dataFields = ["tstamp", "userId", "movieId", "rank", "positive"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }
  ]
  retrievers = [
    {
      name = "exploreSequencePredictorBasedRetriever"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBasedRetrieverConfig"
      predictorName = "exploreSequencePredictor"
      modelName = "exploreSequencePredictorModel"
      N = 24
    }, {
      name = "exploreMTBIPredictorBasedRetriever"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBasedRetrieverConfig"
      predictorName = "exploreMTBIPredictor"
      modelName = "exploreMTBIPredictorModel"
      N = 24
    }
  ]
  predictors = [
    {
      name = "exploreCTRFMPredictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "exploreCTRFMPredictorModel"
      modelFile = ${samantha.modelDir}"/exploreCTRFMPredictorModel.bin"
      labelName = "positive"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieFactor"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.LogisticLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.001
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 20
        learningRate = 0.001
        cachePath = ${samantha.dataDir}
        numProcessors = 8
      }
      factDim = 32
      biasFeas = ["globalBias", "userBias", "movieBias"]
      ufactFeas = ["userFactor", "movieFactor"]
      ifactFeas = ["userFactor", "movieFactor"]
    }, {
      name = "exploreCTRPredictor"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowPredictorConfig"
      modelName = "exploreCTRPredictorModel"
      modelFile = ${samantha.modelDir}"/exploreCTRPredictorModel.bin"
      modelExportDir = ${samantha.modelDir}"/explore_ctr.model"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = []
      updateOper = "update_op"
      lossOper = "metrics/train_loss_op"
      initOper = "init_op"
      outputOper = "prediction/item_pred_op"
      topKOper = "prediction/item_top_k_op"
      topKId = "topKId"
      topKValue = "topKValue"
      itemIndex = "POSITIVE"
      indexKeys = [
        "USER_ID", "MOVIE_ID", "TSTAMP", "SEQ_LEN",
        "POSITIVE",
        "DIS_ACT",
        "POSITIVE_BOOL",
      ]
      predItemFea = "item_eval"
      equalSizeChecks = [
        {
          "featuresWithEqualSizes": ["display", "item"] #positive actioned item
        }, {
          "featuresWithEqualSizes": ["display", "bitem"] #bool positive actioned item
        }, {
          "featuresWithEqualSizes": ["display", "disact", "tstamp"]
        }, {
          "featuresWithEqualSizes": ["user", "sequence_length"]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "USER_ID"
            attrName = "userId"
            feaName = "user"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.DisplayActionGroupExtractorConfig"
            index = "MOVIE_ID"
            sizeFeaIndex = "SEQ_LEN"
            attr = "movieId"
            inGrpRank = "rank"
            fea = "display"
            sizeFea = "sequence_length"
            extractBools = [true]
            actionIndices = ["POSITIVE"]
            actionAttrs = ["positive"]
            actionFeas = ["item"]
            displayActionIndex = "DIS_ACT"
            displayActionFea = "disact"
            separator = "\\|"
            normalize = false
            grpSize = 24
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityGroupExtractorConfig"
            indexName = "TSTAMP"
            attrName = "tstamp"
            feaName = "tstamp"
            separator = "\\|"
            grpSize = 24
            normalize = false
            inGrpRankName = "rank"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "POSITIVE"
            attrName = "movieIdRank"
            keyPrefix = "positive"
            feaName = "item_eval"
            separator = "\\|"
            normalize = false
          }
        ]
      }
      onlineMethodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        numProcessors = 1
      }
      methodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        maxIter = 20
        numProcessors = 1
      }
    }, {
      name = "exploreBPRPredictor"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowPredictorConfig"
      modelName = "exploreBPRPredictorModel"
      modelFile = ${samantha.modelDir}"/exploreBPRPredictorModel.bin"
      modelExportDir = ${samantha.modelDir}"/explore_bpr.model"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = []
      updateOper = "update_op"
      lossOper = "metrics/train_loss_op"
      initOper = "init_op"
      outputOper = "prediction/item_pred_op"
      topKOper = "prediction/item_top_k_op"
      topKId = "topKId"
      topKValue = "topKValue"
      itemIndex = "POSITIVE"
      indexKeys = [
        "USER_ID", "MOVIE_ID", "TSTAMP", "SEQ_LEN",
        "POSITIVE",
        "DIS_ACT",
        "POSITIVE_BOOL",
      ]
      predItemFea = "item_eval"
      equalSizeChecks = [
        {
          "featuresWithEqualSizes": ["display", "item"] #positive actioned item
        }, {
          "featuresWithEqualSizes": ["display", "bitem"] #bool positive actioned item
        }, {
          "featuresWithEqualSizes": ["display", "disact", "tstamp"]
        }, {
          "featuresWithEqualSizes": ["user", "sequence_length"]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "USER_ID"
            attrName = "userId"
            feaName = "user"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.DisplayActionGroupExtractorConfig"
            index = "MOVIE_ID"
            sizeFeaIndex = "SEQ_LEN"
            attr = "movieId"
            inGrpRank = "rank"
            fea = "display"
            sizeFea = "sequence_length"
            extractBools = [true]
            actionIndices = ["POSITIVE"]
            actionAttrs = ["positive"]
            actionFeas = ["item"]
            displayActionIndex = "DIS_ACT"
            displayActionFea = "disact"
            separator = "\\|"
            normalize = false
            grpSize = 24
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityGroupExtractorConfig"
            indexName = "TSTAMP"
            attrName = "tstamp"
            feaName = "tstamp"
            separator = "\\|"
            grpSize = 24
            normalize = false
            inGrpRankName = "rank"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "POSITIVE"
            attrName = "movieIdRank"
            keyPrefix = "positive"
            feaName = "item_eval"
            separator = "\\|"
            normalize = false
          }
        ]
      }
      onlineMethodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        numProcessors = 1
      }
      methodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        maxIter = 20
        numProcessors = 1
      }
    }, {
      name = "exploreCCFPredictor"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowPredictorConfig"
      modelName = "exploreCCFPredictorModel"
      modelFile = ${samantha.modelDir}"/exploreCCFPredictorModel.bin"
      modelExportDir = ${samantha.modelDir}"/explore_ccf.model"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = []
      updateOper = "update_op"
      lossOper = "metrics/train_loss_op"
      initOper = "init_op"
      outputOper = "prediction/item_pred_op"
      topKOper = "prediction/item_top_k_op"
      topKId = "topKId"
      topKValue = "topKValue"
      itemIndex = "POSITIVE"
      indexKeys = [
        "USER_ID", "MOVIE_ID", "TSTAMP", "SEQ_LEN",
        "POSITIVE",
        "DIS_ACT",
        "POSITIVE_BOOL",
      ]
      predItemFea = "item_eval"
      equalSizeChecks = [
        {
          "featuresWithEqualSizes": ["display", "item"] #positive actioned item
        }, {
          "featuresWithEqualSizes": ["display", "bitem"] #bool positive actioned item
        }, {
          "featuresWithEqualSizes": ["display", "disact", "tstamp"]
        }, {
          "featuresWithEqualSizes": ["user", "sequence_length"]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "USER_ID"
            attrName = "userId"
            feaName = "user"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.DisplayActionGroupExtractorConfig"
            index = "MOVIE_ID"
            sizeFeaIndex = "SEQ_LEN"
            attr = "movieId"
            inGrpRank = "rank"
            fea = "display"
            sizeFea = "sequence_length"
            extractBools = [true]
            actionIndices = ["POSITIVE"]
            actionAttrs = ["positive"]
            actionFeas = ["item"]
            displayActionIndex = "DIS_ACT"
            displayActionFea = "disact"
            separator = "\\|"
            normalize = false
            grpSize = 24
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityGroupExtractorConfig"
            indexName = "TSTAMP"
            attrName = "tstamp"
            feaName = "tstamp"
            separator = "\\|"
            grpSize = 24
            normalize = false
            inGrpRankName = "rank"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "POSITIVE"
            attrName = "movieIdRank"
            keyPrefix = "positive"
            feaName = "item_eval"
            separator = "\\|"
            normalize = false
          }
        ]
      }
      onlineMethodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        numProcessors = 1
      }
      methodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        maxIter = 20
        numProcessors = 1
      }
    }, {
      name = "exploreMTBIPredictor"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowPredictorConfig"
      modelName = "exploreMTBIPredictorModel"
      modelFile = ${samantha.modelDir}"/exploreMTBIPredictorModel.bin"
      modelExportDir = ${samantha.modelDir}"/explore_mtbi.model"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = []
      updateOper = "update_op"
      lossOper = "metrics/train_loss_op"
      initOper = "init_op"
      outputOper = "prediction/item_pred_op"
      topKOper = "prediction/item_top_k_op"
      topKId = "topKId"
      topKValue = "topKValue"
      itemIndex = "POSITIVE"
      indexKeys = [
        "USER_ID", "MOVIE_ID", "TSTAMP", "SEQ_LEN",
        "POSITIVE",
        "DIS_ACT",
        "POSITIVE_BOOL",
      ]
      predItemFea = "item_eval"
      equalSizeChecks = [
        {
          "featuresWithEqualSizes": ["display", "item"] #positive actioned item
        }, {
          "featuresWithEqualSizes": ["display", "bitem"] #bool positive actioned item
        }, {
          "featuresWithEqualSizes": ["display", "disact", "tstamp"]
        }, {
          "featuresWithEqualSizes": ["user", "sequence_length"]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "USER_ID"
            attrName = "userId"
            feaName = "user"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.DisplayActionGroupExtractorConfig"
            index = "MOVIE_ID"
            sizeFeaIndex = "SEQ_LEN"
            attr = "movieId"
            inGrpRank = "rank"
            fea = "display"
            sizeFea = "sequence_length"
            extractBools = [true]
            actionIndices = ["POSITIVE"]
            actionAttrs = ["positive"]
            actionFeas = ["item"]
            displayActionIndex = "DIS_ACT"
            displayActionFea = "disact"
            separator = "\\|"
            normalize = false
            grpSize = 24
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityGroupExtractorConfig"
            indexName = "TSTAMP"
            attrName = "tstamp"
            feaName = "tstamp"
            separator = "\\|"
            grpSize = 24
            normalize = false
            inGrpRankName = "rank"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "POSITIVE"
            attrName = "movieIdEval"
            keyPrefix = "positive"
            feaName = "item_eval"
            separator = "\\|"
            normalize = false
          }
        ]
      }
      onlineMethodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        numProcessors = 1
      }
      methodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        maxIter = 20
        numProcessors = 1
      }
    }, {
      name = "exploreSequencePredictor"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowPredictorConfig"
      modelName = "exploreSequencePredictorModel"
      modelFile = ${samantha.modelDir}"/exploreSequencePredictorModel.bin"
      modelExportDir = ${samantha.modelDir}"/explore_sequence.model"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = []
      updateOper = "update_op"
      lossOper = "metrics/train_loss_op"
      initOper = "init_op"
      outputOper = "prediction/item_pred_op"
      topKOper = "prediction/item_top_k_op"
      topKId = "topKId"
      topKValue = "topKValue"
      itemIndex = "MOVIE_ID"
      indexKeys = [
        "USER_ID", "MOVIE_ID", "TSTAMP", "SEQ_LEN",
      ]
      predItemFea = "item_eval"
      equalSizeChecks = [
        {
          "featuresWithEqualSizes": ["item", "tstamp"]
        }, {
          "featuresWithEqualSizes": ["user", "sequence_length"]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "USER_ID"
            attrName = "userId"
            feaName = "user"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "MOVIE_ID"
            attrName = "movieIdAct"
            keyPrefix = "movieId"
            feaName = "item"
            separator = "\\|"
            normalize = false
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityExtractorConfig"
            indexName = "TSTAMP"
            attrName = "tstampAct"
            feaName = "tstamp"
            separator = "\\|"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringSizeExtractorConfig"
            indexName = "SEQ_LEN"
            attrName = "movieIdAct"
            feaName = "sequence_length"
            separator = "|"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "MOVIE_ID"
            attrName = "movieIdEval"
            keyPrefix = "movieId"
            feaName = "item_eval"
            separator = "\\|"
            normalize = false
          }
        ]
      }
      onlineMethodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        numProcessors = 1
      }
      methodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        maxIter = 20
        numProcessors = 1
      }
    }
  ]
  rankers = [
    {
      name = "exploreTopKValueRanker"
      configClass = "org.grouplens.samantha.server.ranker.EntityFieldRankerConfig"
      orderField = "topKValue"
    }, {
      name = "exploreCTRRanker"
      configClass = "org.grouplens.samantha.server.ranker.EntityFieldRankerConfig"
      orderField = "rankingValue"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.StepToSequenceExpander"
          nameAttrs = ["movieId", "topKValue"]
          valueAttrs = ["movieIdRank", "topKValue"]
          otherAttrs = []
          joiner = "|"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.RequestBasedExpander"
          requestFields = ["userId", "tstamp", "movieId", "rank", "positive"]
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "exploreCTRPredictor"
          scoresAttr = "rankingValue"
          joiner = "|"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.SequenceToStepExpander"
          nameAttrs = ["movieIdRank", "rankingValue", "topKValue"]
          valueAttrs = ["movieId", "rankingValue", "topKValue"]
          otherAttrs = []
          separator = "\\|"
        }
      ]
    }, {
      name = "exploreCTRFMRanker"
      configClass = "org.grouplens.samantha.server.ranker.EntityFieldRankerConfig"
      orderField = "rankingValue"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.RequestBasedExpander"
          requestFields = ["userId"]
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "exploreCTRFMPredictor"
          scoresAttr = "rankingValue"
          joiner = "|"
        }
      ]
    }, {
      name = "exploreBPRRanker"
      configClass = "org.grouplens.samantha.server.ranker.EntityFieldRankerConfig"
      orderField = "rankingValue"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.StepToSequenceExpander"
          nameAttrs = ["movieId", "topKValue"]
          valueAttrs = ["movieIdRank", "topKValue"]
          otherAttrs = []
          joiner = "|"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.RequestBasedExpander"
          requestFields = ["userId", "tstamp", "movieId", "rank", "positive"]
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "exploreBPRPredictor"
          scoresAttr = "rankingValue"
          joiner = "|"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.SequenceToStepExpander"
          nameAttrs = ["movieIdRank", "rankingValue", "topKValue"]
          valueAttrs = ["movieId", "rankingValue", "topKValue"]
          otherAttrs = []
          separator = "\\|"
        }
      ]
    }, {
      name = "exploreCCFRanker"
      configClass = "org.grouplens.samantha.server.ranker.EntityFieldRankerConfig"
      orderField = "rankingValue"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.StepToSequenceExpander"
          nameAttrs = ["movieId", "topKValue"]
          valueAttrs = ["movieIdRank", "topKValue"]
          otherAttrs = []
          joiner = "|"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.RequestBasedExpander"
          requestFields = ["userId", "tstamp", "movieId", "rank", "positive"]
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "exploreCCFPredictor"
          scoresAttr = "rankingValue"
          joiner = "|"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.SequenceToStepExpander"
          nameAttrs = ["movieIdRank", "rankingValue", "topKValue"]
          valueAttrs = ["movieId", "rankingValue", "topKValue"]
          otherAttrs = []
          separator = "\\|"
        }
      ]
    }
  ]
  recommenders = [
    {
      name = "exploreSequenceRecommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "exploreSequencePredictorBasedRetriever"
      ranker = "exploreTopKValueRanker"
    }, {
      name = "exploreMTBIRecommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "exploreMTBIPredictorBasedRetriever"
      ranker = "exploreTopKValueRanker"
    }, {
      name = "exploreCTRFMRecommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "exploreSequencePredictorBasedRetriever"
      ranker = "exploreCTRFMRanker"
    }, {
      name = "exploreCTRRecommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "exploreSequencePredictorBasedRetriever"
      ranker = "exploreCTRRanker"
    }, {
      name = "exploreBPRRecommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "exploreSequencePredictorBasedRetriever"
      ranker = "exploreBPRRanker"
    }, {
      name = "exploreCCFRecommender"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "exploreSequencePredictorBasedRetriever"
      ranker = "exploreCCFRanker"
    }
  ]
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
  evaluators = [
    {
      name = "DisplayShownAUCEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      labelAttr = "positiveEval"
      separator = "\\|"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = "\\|"
          joiner = "|"
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "movieId", "rank", "positive"]
          valueAttrs = ["tstamp", "movieId", "rank", "positive"]
          separator = "\\|"
          joiner = "|"
          maxStepNum = 2400
          backward = false
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.SequenceTstampSplitExpander"
          nameAttrs = ["movieId", "tstamp", "rank", "positive"]
          beforeAttrs = ["movieId", "tstamp", "rank", "positive"]
          afterAttrs = ["movieIdEval", "tstampEval", "rankEval", "positiveEval"]
          tstampAttr = "tstamp"
          splitTstamp = 1509512400
          separator = "\\|"
          joiner = "|"
        }
      ]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positiveEval"
          labelKey = "labelName"
          aucType = "GLOBAL"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positiveEval"
          labelKey = "labelName"
          aucType = "PERGROUP"
        }
      ]
    }, {
      name = "DisplaySampledAUCEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      labelAttr = "positiveEval"
      separator = "\\|"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = "\\|"
          joiner = "|"
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "movieId", "rank", "positive"]
          valueAttrs = ["tstamp", "movieId", "rank", "positive"]
          separator = "\\|"
          joiner = "|"
          maxStepNum = 2400
          backward = false
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.SequenceTstampSplitExpander"
          nameAttrs = ["movieId", "tstamp", "rank", "positive"]
          beforeAttrs = ["movieId", "tstamp", "rank", "positive"]
          afterAttrs = ["movieIdEval", "tstampEval", "rankEval", "positiveEval"]
          tstampAttr = "tstamp"
          splitTstamp = 1509512400
          separator = "\\|"
          joiner = "|"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.Display2ActionExpander"
          nameAttrs = ["tstampEval", "movieIdEval", "positiveEval"]
          valueAttrs = ["tstampEval", "movieIdEval", "positiveEval"]
          actionName = "positiveEval"
          separator = "\\|"
          joiner = "|"
          alwaysInclude = false
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.NegativeSamplingExpander"
          predictorName = "exploreTensorFlowDisplayPredictor"
          modelName = "exploreTensorFlowDisplayPredictorModel"
          keyPrefix = "positive"
          itemAttr = "movieIdEval"
          labelAttr = "positiveEval"
          itemIndex = "POSITIVE"
          separator = "\\|"
          joiner = "|"
          maxNumSample = 2000
        }
      ]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positiveEval"
          labelKey = "labelName"
          aucType = "GLOBAL"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positiveEval"
          labelKey = "labelName"
          aucType = "PERGROUP"
        }
      ]
    }, {
      name = "PositiveShownAUCEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      labelAttr = "positiveEval"
      separator = "\\|"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = "\\|"
          joiner = "|"
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "movieId", "rank", "positive"]
          valueAttrs = ["tstamp", "movieId", "rank", "positive"]
          separator = "\\|"
          joiner = "|"
          maxStepNum = 2400
          backward = false
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.SequenceTstampSplitExpander"
          nameAttrs = ["movieId", "tstamp", "rank", "positive"]
          beforeAttrs = ["movieId", "tstamp", "rank", "positive"]
          afterAttrs = ["movieIdEval", "tstampEval", "rankEval", "positiveEval"]
          tstampAttr = "tstamp"
          splitTstamp = 1509512400
          separator = "\\|"
          joiner = "|"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.Display2ActionExpander"
          nameAttrs = ["tstamp", "movieId", "positive", "rank"]
          valueAttrs = ["tstamp", "movieId", "positive", "rank"]
          actionName = "positive"
          separator = "\\|"
          joiner = "|"
          alwaysInclude = true
        }
      ]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positiveEval"
          labelKey = "labelName"
          aucType = "GLOBAL"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positiveEval"
          labelKey = "labelName"
          aucType = "PERGROUP"
        }
      ]
    }, {
      name = "PositiveSampledAUCEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      labelAttr = "positiveEval"
      separator = "\\|"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = "\\|"
          joiner = "|"
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "movieId", "rank", "positive"]
          valueAttrs = ["tstamp", "movieId", "rank", "positive"]
          separator = "\\|"
          joiner = "|"
          maxStepNum = 2400
          backward = false
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.SequenceTstampSplitExpander"
          nameAttrs = ["movieId", "tstamp", "rank", "positive"]
          beforeAttrs = ["movieId", "tstamp", "rank", "positive"]
          afterAttrs = ["movieIdEval", "tstampEval", "rankEval", "positiveEval"]
          tstampAttr = "tstamp"
          splitTstamp = 1509512400
          separator = "\\|"
          joiner = "|"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.Display2ActionExpander"
          nameAttrs = ["tstamp", "movieId", "positive", "rank"]
          valueAttrs = ["tstamp", "movieId", "positive", "rank"]
          actionName = "positive"
          separator = "\\|"
          joiner = "|"
          alwaysInclude = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.Display2ActionExpander"
          nameAttrs = ["tstampEval", "movieIdEval", "positiveEval"]
          valueAttrs = ["tstampEval", "movieIdEval", "positiveEval"]
          actionName = "positiveEval"
          separator = "\\|"
          joiner = "|"
          alwaysInclude = false
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.NegativeSamplingExpander"
          predictorName = "exploreTensorFlowPositivePredictor"
          modelName = "exploreTensorFlowPositivePredictorModel"
          keyPrefix = "movieId"
          itemAttr = "movieIdEval"
          labelAttr = "positiveEval"
          itemIndex = "MOVIE_ID"
          separator = "\\|"
          joiner = "|"
          maxNumSample = 2000
        }
      ]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positiveEval"
          labelKey = "labelName"
          aucType = "GLOBAL"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positiveEval"
          labelKey = "labelName"
          aucType = "PERGROUP"
        }
      ]
    }, {
      name = "RecommendationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId"]
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.LogicalExpander"
          sourceAttrs = ["click", "highRate", "trailer", "wishlist"]
          valueAttr = "positive"
          separator = "\\|"
          joiner = "|"
          or = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.TruncatingExpander"
          nameAttrs = ["tstamp", "movieId", "rank", "positive"]
          valueAttrs = ["tstamp", "movieId", "rank", "positive"]
          separator = "\\|"
          joiner = "|"
          maxStepNum = 2400
          backward = false
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.SequenceTstampSplitExpander"
          nameAttrs = ["movieId", "tstamp", "rank", "positive"]
          beforeAttrs = ["movieId", "tstamp", "rank", "positive"]
          afterAttrs = ["movieIdEval", "tstampEval", "rankEval", "positiveEval"]
          tstampAttr = "tstamp"
          splitTstamp = 1509512400
          separator = "\\|"
          joiner = "|"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.Display2ActionExpander"
          nameAttrs = ["tstamp", "movieId"]
          valueAttrs = ["tstampAct", "movieIdAct"]
          actionName = "positive"
          separator = "\\|"
          joiner = "|"
          alwaysInclude = true
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.Display2ActionExpander"
          nameAttrs = ["tstampEval", "movieIdEval", "positiveEval"]
          valueAttrs = ["tstampEval", "movieIdEval", "positiveEval"]
          actionName = "positiveEval"
          separator = "\\|"
          joiner = "|"
          alwaysInclude = false
        }
      ]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["movieIdEval"]
          recKeys = ["movieId"]
          #recKeys = ["positive"]
          separator = "\\|"
          N = [1, 5, 8, 10, 15, 20, 24]
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.PrecisionConfig"
          itemKeys = ["movieIdEval"]
          recKeys = ["movieId"]
          #recKeys = ["positive"]
          separator = "\\|"
          N = [1, 5, 8, 10, 15, 20, 24]
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.RecallConfig"
          itemKeys = ["movieIdEval"]
          recKeys = ["movieId"]
          #recKeys = ["positive"]
          separator = "\\|"
          N = [1, 5, 8, 10, 15, 20, 24]
        }
      ]
    }, {
      name = "PositiveAUCEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positive"
          aucType = "GLOBAL"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "positive"
          aucType = "PERGROUP"
        }
      ]
    }
  ]
  schedulers = []
}
