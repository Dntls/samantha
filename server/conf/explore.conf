samantha.explore {
  engineType = "RECOMMENDER"
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "tensorFlowFeaturizedJsonBatch"
      configClass = "org.grouplens.samantha.server.indexer.JsonFileIndexerConfig"
      indexType = "exploreTensorFlowFeaturizedJsonBatch"
      filesKey = "files"
      timestampField = "timestamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "JsonFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "userMovieDisplay"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "exploreUserMovieDisplay"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["tstamp", "userId", "movieId", "rank", "click", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "groupedUserMovieDisplay"
      configClass = "org.grouplens.samantha.server.indexer.GroupedIndexerConfig"
      dependedIndexer = "userMovieDisplay"
      dataFields = ["tstamp", "userId", "movieId", "rank", "click", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop"]
      filesKey = "files"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      groupKeys = ["userId"]
      orderFields = ["tstamp", "rank"]
      orderFieldsTypes = ["INT", "INT"]
      numBuckets = 100
      skip = true
      separator = "\t"
      dataDir = ${samantha.dataDir}"/exploreGroupedUserMovieDisplay"
      dataDirKey = "dataDir"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userMovieDisplaySequence"
      configClass = "org.grouplens.samantha.server.tensorflow.UserSequenceIndexerConfig"
      dependedIndexer = "groupedUserMovieDisplay"
      groupKeys = ["userId"]
      otherDataFields = ["tstamp", "movieId", "rank", "click", "highRate", "lowRate", "trailer", "wishlist", "hover", "stop"]
      filesKey = "files"
      filePath = ${samantha.dataDir}"/userMovieDisplaySequence.tsv"
      filePathKey = "filePath"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      separator = "\t"
      innerFieldSeparator = "|"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userSequenceTensorFlowBatch"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBatchIndexerConfig"
      dependedIndexer = "tensorFlowFeaturizedJsonBatch"
      tensorFlowPredictor = "exploreTensorFlowActionPredictor"
      tensorFlowModel = "exploreTensorFlowActionPredictorModel"
      batchSize = 32
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }
  ]
  retrievers = [
    {
      name = "exploreFeatureSupportMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.FeatureSupportRetrieverConfig"
      modelName = "exploreFeatureSupportModel"
      modelFile = ${samantha.modelDir}"/exploreFeatureSupportModel.bin"
      maxHits = 1000
      itemAttrs = ["movieId"]
      supportAttr = "support"
      svdfeaPredictorName = "exploreActionPredictor"
      svdfeaModelName = "exploreActionPredictorModel"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.RequestBasedExpander"
          requestFields = ["userId"]
        }
      ]
    }
  ]
  predictors = [
    {
      name = "exploreActionPredictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "exploreActionPredictorModel"
      modelFile = ${samantha.modelDir}"/exploreActionPredictorModel.bin"
      labelName = "action"
      weightName = "weight"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = ["BinaryPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "rank"
            indexName = "BIASES"
            feaName = "rankBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SelfPlusOneRatioExtractorConfig"
            attrName = "dwell"
            indexName = "BIASES"
            feaName = "dwellBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "rank"
            indexName = "FACTORS"
            feaName = "rankFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SelfPlusOneRatioExtractorConfig"
            attrName = "dwell"
            indexName = "FACTORS"
            feaName = "dwellFactor"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.LogisticLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 0.01
        l2coef = 0.0
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        cachePath = ${samantha.dataDir}
        numProcessors = 4
        learningRate = 0.001
        l2coef = 0.0
        maxIter = 50
      }
      factDim = 30
      biasFeas = ["globalBias", "userBias", "movieBias", "rankBias", "dwellBias"]
      ufactFeas = ["userFactor"]
      ifactFeas = ["movieFactor", "rankFactor", "dwellFactor"]
    }, {
      name = "exploreTensorFlowActionPredictor"
      configClass = "org.grouplens.samantha.server.predictor.TensorFlowPredictorConfig"
      modelName = "exploreTensorFlowActionPredictorModel"
      modelFile = ${samantha.modelDir}"/exploreTensorFlowActionPredictorModel.bin"
      graphDefFilePath = ${samantha.modelDir}"/tensorflow.graph"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = []
      updateOperationName = "update_op"
      lossOperationName = "loss_op"
      initOperationName = "init_op"
      outputOperationName = "pred_op"
      indexKeys = [
        "USER_ID", "MOVIE_ID", "TSTAMP", "CLICK", "HRATE",
        "LRATE", "TRAILER", "WISHLIST", "HOVER", "STOP", "DIS_ACT", "SEQ_LEN",
        "CLICK_BOOL", "HRATE_BOOL", "LRATE_BOOL", "TRAILER_BOOL", "WISHLIST_BOOL", "HOVER_BOOL", "STOP_BOOL",
      ]
      equalSizeChecks = [
        {
          "featuresWithEqualSizes": ["item", "click", "hrate", "lrate"]
        }, {
          "featuresWithEqualSizes": ["item", "bclick", "bhrate", "blrate"]
        }, {
          "featuresWithEqualSizes": ["item", "action", "tstamp"]
        }, {
          "featuresWithEqualSizes": ["user", "sequence_length"]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "USER_ID"
            attrName = "userId"
            feaName = "user"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.DisplayActionGroupExtractorConfig"
            index = "MOVIE_ID"
            sizeFeaIndex = "SEQ_LEN"
            attr = "movieId"
            inGrpRank = "rank"
            fea = "item"
            sizeFea = "sequence_length"
            extractBools = [true, true, true]
            actionIndices = ["CLICK", "HRATE", "LRATE"]
            actionAttrs = ["click", "highRate", "lowRate"]
            actionFeas = ["click", "hrate", "lrate"]
            displayActionIndex = "DIS_ACT"
            displayActionFea = "action"
            separator = "\\|"
            normalize = false
            grpSize = 24
            maxGrpNum = 2000
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedIdentityGroupExtractorConfig"
            indexName = "TSTAMP"
            attrName = "tstamp"
            feaName = "tstamp"
            separator = "\\|"
            grpSize = 24
            normalize = false
            inGrpRankName = "rank"
            maxGrpNum = 2000
          }
        ]
      }
      onlineMethodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
      }
      methodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        maxIter = 20
      }
    }
  ]
  rankers = []
  recommenders = []
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
  evaluators = [
    {
      name = "RealPredictionEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAEConfig"
          labelName = "rating"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.RMSEConfig"
          labelName = "rating"
        }
      ]
    }, {
      name = "BinaryPredictionEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "action"
          aucType = "GLOBAL"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "action"
          aucType = "PERGROUP"
        }
      ]
    }, {
      name = "RecommendationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId"]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["movieId"]
          relevanceKey = "action"
          threshold = 0.5
          N = [8, 24]
        }
      ]
    }
  ]
  schedulers = []
}
