samantha.entityDaosConfig.TimeFilteredDAO {
  daoConfigClass = "org.grouplens.samantha.server.dao.TimeFilteredDAOConfig"
  entityDaosConfig = ${samantha.simpleDaosConfig}
  timestampField = "unixReviewTime"
  beginTimeKey = "beginTime"
  endTimeKey = "endTime"
  subDaoConfigKey = "subDaoConfig"
}

samantha.amazon {
  engineType = "RECOMMENDER"
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "tensorFlowFeaturizedJsonBatch"
      configClass = "org.grouplens.samantha.server.indexer.JsonFileIndexerConfig"
      indexType = "amazonTensorFlowFeaturizedJsonBatch"
      filesKey = "files"
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "JsonFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "featurizedItemAttributeRelation"
      configClass = "org.grouplens.samantha.server.indexer.JsonFileIndexerConfig"
      indexType = "amazonFeaturizedItemAttributeRelation"
      filesKey = "files"
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "JsonFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
    }, {
      name = "userAsinReview"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "amazonUserAsinReview"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["unixReviewTime", "reviewerID", "asin", "category", "brand", "overall"]
      timestampField = "unixReviewTime"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
      dataSubscribers = []
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.MapItemId2InfoExpander"
          modelName = "amazonTFIDFAsinInfoModel"
          idField = "asin"
          infoFields = ["category", "brand"]
        }
      ]
    }, {
      name = "groupedUserAsinReview"
      configClass = "org.grouplens.samantha.server.indexer.GroupedIndexerConfig"
      dependedIndexer = "userAsinReview"
      dataFields = ["unixReviewTime", "reviewerID", "asin", "category", "brand", "overall"]
      filesKey = "files"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      groupKeys = ["reviewerID"]
      orderFields = ["unixReviewTime"]
      orderFieldsTypes = ["INT"]
      numBuckets = 500
      skip = true
      separator = "\t"
      dataDir = ${samantha.dataDir}"/amazonGroupedUserAsinReview"
      dataDirKey = "dataDir"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userAsinReviewSequence"
      configClass = "org.grouplens.samantha.server.tensorflow.UserSequenceIndexerConfig"
      dependedIndexer = "groupedUserAsinReview"
      groupKeys = ["reviewerID"]
      otherDataFields = ["unixReviewTime", "asin", "category", "brand", "overall"]
      filesKey = "files"
      filePath = ${samantha.dataDir}"/amazonUserAsinReviewSequence.tsv"
      filePathKey = "filePath"
      separatorKey = "separator"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      separator = "\t"
      innerFieldSeparator = "<>"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "userSequenceTensorFlowBatch"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBatchIndexerConfig"
      dependedIndexer = "tensorFlowFeaturizedJsonBatch"
      tensorFlowPredictor = "amazonTensorFlowReviewPredictor"
      tensorFlowModel = "amazonTensorFlowReviewPredictorModel"
      timestampField = "tstamp"
      batchSize = 32
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }, {
      name = "itemAttributeTensorFlowBatch"
      configClass = "org.grouplens.samantha.server.tensorflow.TensorFlowBatchIndexerConfig"
      dependedIndexer = "featurizedItemAttributeRelation"
      tensorFlowPredictor = "amazonTensorFlowReviewPredictor"
      tensorFlowModel = "amazonTensorFlowReviewPredictorModel"
      timestampField = "tstamp"
      batchSize = 32
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.entityDaosConfig}
    }
  ]
  retrievers = []
  predictors = [
    {
      name = "amazonTensorFlowReviewPredictor"
      configClass = "org.grouplens.samantha.server.predictor.TensorFlowPredictorConfig"
      modelName = "amazonTensorFlowReviewPredictorModel"
      modelFile = ${samantha.modelDir}"/amazonTensorFlowReviewPredictorModel.bin"
      graphDefFilePath = ${samantha.modelDir}"/tensorflow.graph"
      entityDaosConfig = ${samantha.entityDaosConfig}
      daoConfigKey = "daoConfig"
      evaluatorNames = []
      updateOperationName = "update_op"
      lossOperationName = "loss_op"
      initOperationName = "init_op"
      outputOperationName = "pred_op"
      indexKeys = ["REVIEWER_ID", "ASIN", "CATEGORY", "BRAND", "SEQ_LEN"]
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.MapItemId2InfoExpander"
          modelName = "amazonTFIDFAsinInfoModel"
          modelFile = ${samantha.modelDir}"/amazonTFIDFAsinInfoModel.bin"
          idField = "asin"
          infoFields = ["category", "brand"]
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.entityDaosConfig}
        }
      ]
      #equalSizeChecks = [
      #  {
      #    "featuresWithEqualSizes": ["item", "category", "brand"]
      #  }, {
      #    "featuresWithEqualSizes": ["user", "sequence_length"]
      #  }
      #]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "REVIEWER_ID"
            attrName = "reviewerID"
            feaName = "user"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "ASIN"
            attrName = "asin"
            feaName = "item"
            separator = "<>"
            normalize = false
            fillIn = "null"
            #maxFeatures = 500
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "CATEGORY"
            attrName = "category"
            feaName = "category"
            separator = "<>"
            normalize = false
            fillIn = "null"
            #maxFeatures = 500
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringExtractorConfig"
            indexName = "BRAND"
            attrName = "brand"
            feaName = "brand"
            separator = "<>"
            normalize = false
            fillIn = "null"
            #maxFeatures = 500
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.SeparatedStringSizeExtractorConfig"
            indexName = "SEQ_LEN"
            attrName = "asin"
            feaName = "sequence_length"
            separator = "<>"
            #maxFeatures = 500
          }
        ]
      }
      onlineMethodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
      }
      methodConfig {
        methodClass = "org.grouplens.samantha.server.solver.TensorFlowMethodConfig"
        maxIter = 20
      }
    }
  ]
  rankers = []
  recommenders = []
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
  evaluators = []
  schedulers = []
}
